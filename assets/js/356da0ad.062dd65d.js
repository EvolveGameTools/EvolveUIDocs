"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[76617],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},24388:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={},o="Execution Graphs",l={unversionedId:"templates/graph_docs",id:"templates/graph_docs",title:"Execution Graphs",description:"Graphs are a way for you to orchestrate things in your UI. The primary use case is for sequencing animations",source:"@site/docs/templates/graph_docs.mdx",sourceDirName:"templates",slug:"/templates/graph_docs",permalink:"/EvolveUIDocs/docs/templates/graph_docs",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"conceptual",previous:{title:"Generics",permalink:"/EvolveUIDocs/docs/templates/generics"},next:{title:"Grid Layout",permalink:"/EvolveUIDocs/docs/templates/grid_layout_docs"}},s={},p=[{value:"Sequence <code>sequence(Action a)</code>",id:"sequence-sequenceaction-a",level:3},{value:"Parallel <code>parallel(Action a)</code>",id:"parallel-parallelaction-a",level:3},{value:"Log <code>log(string message)</code>",id:"log-logstring-message",level:3},{value:"Log <code>log(Func&lt;string&gt; fn)</code>",id:"log-logfuncstring-fn",level:3},{value:"Pause <code>pause(int milliseconds)</code>",id:"pause-pauseint-milliseconds",level:3},{value:"AwaitEvent <code>awaitEvent(string eventName)</code>",id:"awaitevent-awaiteventstring-eventname",level:3},{value:"EmitEvent <code>emitEvent(string eventName)</code>",id:"emitevent-emiteventstring-eventname",level:3},{value:"WaitFrames <code>waitFrames(int frameCount)</code>",id:"waitframes-waitframesint-framecount",level:3},{value:"Custom Graph nodes",id:"custom-graph-nodes",level:2},{value:"Other Graph Nodes",id:"other-graph-nodes",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"execution-graphs"},"Execution Graphs"),(0,r.kt)("p",null,"Graphs are a way for you to orchestrate things in your UI. The primary use case is for sequencing animations\nbut there are plenty of use cases for this if you think outside the box a bit. "),(0,r.kt)("p",null,"If you've used Behavior Trees, this will be quite familiar to you. The basic idea is that you execute a list\nof actions either sequentially or in parallel."),(0,r.kt)("p",null,"Here is an example. We have a box that we want to animate to the center of the screen. Wait for half a second,\nthen rotate 180 degress while changing color. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Action<ElementHandle> graphBuilder = (root) => {\n    // we run a sequence of steps that execute one after the other \n    sequence(() => { // this isn\'t actually needed since the default graph root is already a sequence,but its here for illustration purposes\n        \n        // run the first animation phase,use a parallel() because both animations should run at the same time\n        parallel(() => {\n            root.AnimateAlignmentOffsetX(Spring.Default.AnimateTo(new AlignmentOffset(0.5, AlignmentOffsetUnit.ScreenWidth));\n            root.AnimateAlignmentOffsetY(Spring.Default.AnimateTo(new AlignmentOffset(0.5, AlignmentOffsetUnit.ScreenHeight));\n        });\n        \n        log("finished animating phase 0");\n        \n        // when done animating, wait half a second\n        pause(500);\n        \n        log("finished waiting 500 milliseconds");\n        \n        // now animate rotation and background color at the same time \n        parallel(() => {\n            root.AnimateRenderTransform(Tween.LinearTo(new RenderTransform().Rotate(180));\n            root.AnimateBackgroundColor(Tween.CubicEaseInTo(Color.red)); \n        });\n        \n        log("finished animating phase 1");\n        \n    });\n    \n}\n \nGraphInstance graph = Graph.CreateGraph(someElement, graphBuilder);\ngraph.Execute(); // call this to tick the graph every frame \n')),(0,r.kt)("p",null,"There are lots of baked in graph node types. They all live on the static class ",(0,r.kt)("inlineCode",{parentName:"p"},"Graph"),". "),(0,r.kt)("p",null,"It is recommended to use ",(0,r.kt)("inlineCode",{parentName:"p"},"using static EvolveUI.ExecutionGraph.Graph;")," statement so you don't need to write ",(0,r.kt)("inlineCode",{parentName:"p"},"Graph.xyz")," in front of all your commands.graph"),(0,r.kt)("h3",{id:"sequence-sequenceaction-a"},"Sequence ",(0,r.kt)("inlineCode",{parentName:"h3"},"sequence(Action a)")),(0,r.kt)("p",null,"Runs a set of steps sequentially. Each step will run until it completes, then the next step will run "),(0,r.kt)("h3",{id:"parallel-parallelaction-a"},"Parallel ",(0,r.kt)("inlineCode",{parentName:"h3"},"parallel(Action a)")),(0,r.kt)("p",null,"Runs a set of steps in parallel. This node completes when all of its children are finished"),(0,r.kt)("h3",{id:"log-logstring-message"},"Log ",(0,r.kt)("inlineCode",{parentName:"h3"},"log(string message)")),(0,r.kt)("p",null,"Logs the message and completes immediately"),(0,r.kt)("h3",{id:"log-logfuncstring-fn"},"Log ",(0,r.kt)("inlineCode",{parentName:"h3"},"log(Func<string> fn)")),(0,r.kt)("p",null,"Logs the result of the function and completes immediately"),(0,r.kt)("h3",{id:"pause-pauseint-milliseconds"},"Pause ",(0,r.kt)("inlineCode",{parentName:"h3"},"pause(int milliseconds)")),(0,r.kt)("p",null,"Pauses for the set number of milliseconds and completes when the duration has elapsed"),(0,r.kt)("h3",{id:"awaitevent-awaiteventstring-eventname"},"AwaitEvent ",(0,r.kt)("inlineCode",{parentName:"h3"},"awaitEvent(string eventName)")),(0,r.kt)("p",null,"Waits until the graph receives an event with the given ",(0,r.kt)("inlineCode",{parentName:"p"},"eventName")),(0,r.kt)("h3",{id:"emitevent-emiteventstring-eventname"},"EmitEvent ",(0,r.kt)("inlineCode",{parentName:"h3"},"emitEvent(string eventName)")),(0,r.kt)("p",null,"Emits an event with ",(0,r.kt)("inlineCode",{parentName:"p"},"eventName")," on the graph and completes immediately "),(0,r.kt)("h3",{id:"waitframes-waitframesint-framecount"},"WaitFrames ",(0,r.kt)("inlineCode",{parentName:"h3"},"waitFrames(int frameCount)")),(0,r.kt)("p",null,"Waits ",(0,r.kt)("inlineCode",{parentName:"p"},"frameCount")," frames and then completes"),(0,r.kt)("h2",{id:"custom-graph-nodes"},"Custom Graph nodes"),(0,r.kt)("p",null,"you can define your own graph actions by extending ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphNode"),". You just need to set ",(0,r.kt)("inlineCode",{parentName:"p"},"IsCompleted")," at the right time and implement your ",(0,r.kt)("inlineCode",{parentName:"p"},"Update")," override "),(0,r.kt)("h2",{id:"other-graph-nodes"},"Other Graph Nodes"),(0,r.kt)("p",null,"the ",(0,r.kt)("inlineCode",{parentName:"p"},"ElementHandle")," type provides wrappers around other node types like ",(0,r.kt)("inlineCode",{parentName:"p"},"SetAttribute")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Animate..")))}u.isMDXComponent=!0}}]);