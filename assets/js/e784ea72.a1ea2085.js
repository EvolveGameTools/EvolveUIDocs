"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[68347],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var o=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),p=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(r),h=n,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||a;return r?o.createElement(m,l(l({ref:t},c),{},{components:r})):o.createElement(m,l({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,l=new Array(a);l[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:n,l[1]=i;for(var p=2;p<a;p++)l[p]=r[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,r)}h.displayName="MDXCreateElement"},68291:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var o=r(87462),n=(r(67294),r(3905));const a={},l="Portals & Teleportation",i={unversionedId:"Topics/BodyBlock/teleportation",id:"Topics/BodyBlock/teleportation",title:"Portals & Teleportation",description:"Evolve's template interface doesn't support arbitrary reordering of the ui tree like other frameworks do, because",source:"@site/docs/Topics/BodyBlock/teleportation.md",sourceDirName:"Topics/BodyBlock",slug:"/Topics/BodyBlock/teleportation",permalink:"/EvolveUIDocs/docs/Topics/BodyBlock/teleportation",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"conceptual",previous:{title:"Markers",permalink:"/EvolveUIDocs/docs/Topics/BodyBlock/markers"},next:{title:"Variables",permalink:"/EvolveUIDocs/docs/Topics/BodyBlock/variables"}},s={},p=[{value:"Portals",id:"portals",level:2}],c={toc:p};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"portals--teleportation"},"Portals & Teleportation"),(0,n.kt)("p",null,"Evolve's template interface doesn't support arbitrary reordering of the ui tree like other frameworks do, because\nit requires your app to use Structural Identity to figure out which elements are linked to various scopes. "),(0,n.kt)("p",null,"In other languages/frameworks you an manipulate the ui tree however you like, whenever you like.\nFor example, with HTML you could define a piece of dom and then re-parent it at will."),(0,n.kt)("p",null,"The primary use case for wanting to re-order the tree is to move groups of elements to other places.\nLuckily, in almost all cases, you the author of the UI know where there other places are in your app. "),(0,n.kt)("p",null,"To address this usecase, Evolve has a feature called ",(0,n.kt)("inlineCode",{parentName:"p"},"teleport"),". It does exactly what it sounds like: it teleports\nhierarchies of elements into other places in your app. "),(0,n.kt)("p",null,"A good example of this is a modal dialog. You have all of the data/state for this in a template you've authored,\nbut you want to actually render the modal on a higher layer than the currently executing template would normally\nbe rendered at. You can solve this easily with a teleport. "),(0,n.kt)("p",null,"The second piece of the puzzle is the ",(0,n.kt)("inlineCode",{parentName:"p"},"portal")," directive. Once you have ",(0,n.kt)("inlineCode",{parentName:"p"},"teleport"),"-ed your content somewhere, you\nwill need to render a portal of the same name to actually display the content. If a teleport doesn't find a matching\nportal at the end of the frame, its contents will end up in purgatory, where they are considered active but\nwill not layout or render. "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'template PortalExample render {\n\n    state bool isConfirmed;\n    \n    // there are two parts to the syntax, the first is what you want teleported. In this case we want to show our \n    // \'Confirm\' button in a modal overlay. However we haven\'t yet rendered the modal layer because it natually must \n    // appear on top of the rest of our UI.\n    teleport->("Modal") {\n        // any bindings will run at this point and all context is lexical \n        if(!isConfirmed) {\n            Button("Confirm", mouse:click = isConfirmed = true);\n        }\n    }\n\n}\n\n//... later in another template we will render the modal itself\n\ntemplate Portal render {\n\n    // this is where our Button element actually renders.\n    // we are able to use the button in the binding scope of our template but it is somewhere completely different in the hierarchy\n    // important! this also means that it will be laid out and styled as though its parent were the parent of the portal,\n    // it is completely disconnected from its original usage except for bindings!\n    render portal("Modal"); \n    \n')),(0,n.kt)("h2",{id:"portals"},"Portals"),(0,n.kt)("p",null,"Portals are kind of like a reverse slot. It is a way to inject content elsewhere in the app while still\nhaving a binding scope that is local to the element. A great example of this is a tooltip or a modal dialog."))}u.isMDXComponent=!0}}]);