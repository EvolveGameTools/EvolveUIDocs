"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[44570],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),i=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=i(e.components);return n.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=i(r),m=a,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||l;return r?n.createElement(f,o(o({ref:t},u),{},{components:r})):n.createElement(f,o({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var i=2;i<l;i++)o[i]=r[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},83861:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return i},toc:function(){return d}});var n=r(87462),a=r(63366),l=(r(67294),r(3905)),o=["components"],s={},c="ListAllocatorSized",i={unversionedId:"api_generated/uncategorized_generated/ListAllocatorSized",id:"api_generated/uncategorized_generated/ListAllocatorSized",title:"ListAllocatorSized",description:"struct in EvolveUI.Unsafe",source:"@site/docs/api_generated/uncategorized_generated/ListAllocatorSized.mdx",sourceDirName:"api_generated/uncategorized_generated",slug:"/api_generated/uncategorized_generated/ListAllocatorSized",permalink:"/EvolveUIDocs/docs/api_generated/uncategorized_generated/ListAllocatorSized",tags:[],version:"current",frontMatter:{},sidebar:"conceptual",previous:{title:"LineInfo",permalink:"/EvolveUIDocs/docs/api_generated/uncategorized_generated/LineInfo"},next:{title:"LongBoolMap",permalink:"/EvolveUIDocs/docs/api_generated/uncategorized_generated/LongBoolMap"}},u={},d=[],p={toc:d};function m(e){var t=e.components,r=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"listallocatorsized"},"ListAllocatorSized"),(0,l.kt)("p",null,"struct in EvolveUI.Unsafe"),(0,l.kt)("p",null,"A simple pool allocator intended to be used to allocate lists of unmanaged types.Memory returned is NOT cleared, user must clear it if desired.Uses a set of fixed block allocators but doesn't commit memory into the block sizesuntil it actually needs to, which should reduce memory waste dramatically."),(0,l.kt)("p",null,"This will not recycle blocks between sizes because I don't want to pay the price of coalescingneighboring blocks that are free. (a-la Buddy allocator)"),(0,l.kt)("p",null,"Fields"),(0,l.kt)("table",{class:"list"},(0,l.kt)("tbody",null,(0,l.kt)("tr",null,(0,l.kt)("td",{className:"label"},"minAllocSize"),(0,l.kt)("td",{className:"desc"},"Description goes here")),(0,l.kt)("tr",null,(0,l.kt)("td",{className:"label"},"maxAllocSize"),(0,l.kt)("td",{className:"desc"},"Description goes here")),(0,l.kt)("tr",null,(0,l.kt)("td",{className:"label"},"pageSize"),(0,l.kt)("td",{className:"desc"},"Description goes here")))),"# Methods",(0,l.kt)("table",{className:"list"},(0,l.kt)("tbody",null,(0,l.kt)("tr",null,(0,l.kt)("td",{className:"label"},(0,l.kt)("a",null,"Clear")),(0,l.kt)("td",{className:"desc"},"Description goes here")),(0,l.kt)("tr",null,(0,l.kt)("td",{className:"label"},(0,l.kt)("a",null,"Dispose")),(0,l.kt)("td",{className:"desc"},"Description goes here")),(0,l.kt)("tr",null,(0,l.kt)("td",{className:"label"},(0,l.kt)("a",null,"Allocate")),(0,l.kt)("td",{className:"desc"},"Description goes here")),(0,l.kt)("tr",null,(0,l.kt)("td",{className:"label"},(0,l.kt)("a",null,"Free")),(0,l.kt)("td",{className:"desc"},"Description goes here")),(0,l.kt)("tr",null,(0,l.kt)("td",{className:"label"},(0,l.kt)("a",null,"GetPageCount")),(0,l.kt)("td",{className:"desc"},"Description goes here")),(0,l.kt)("tr",null,(0,l.kt)("td",{className:"label"},(0,l.kt)("a",null,"DumpPageStats")),(0,l.kt)("td",{className:"desc"},"Description goes here")),(0,l.kt)("tr",null,(0,l.kt)("td",{className:"label"},(0,l.kt)("a",null,"Reallocate")),(0,l.kt)("td",{className:"desc"},"Description goes here")),(0,l.kt)("tr",null,(0,l.kt)("td",{className:"label"},(0,l.kt)("a",null,"GetCapacityFromSize")),(0,l.kt)("td",{className:"desc"},"Description goes here")))))}m.isMDXComponent=!0}}]);