"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[33044],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:r,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},17086:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const o={},i=void 0,c={unversionedId:"Topics/TopLevelDeclarations/Entities/decorator",id:"Topics/TopLevelDeclarations/Entities/decorator",title:"decorator",description:"Decorators",source:"@site/docs/Topics/TopLevelDeclarations/Entities/decorator.md",sourceDirName:"Topics/TopLevelDeclarations/Entities",slug:"/Topics/TopLevelDeclarations/Entities/decorator",permalink:"/EvolveUIDocs/docs/Topics/TopLevelDeclarations/Entities/decorator",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"conceptual",previous:{title:"Companion Types",permalink:"/EvolveUIDocs/docs/Topics/TopLevelDeclarations/Entities/companions"},next:{title:"Function",permalink:"/EvolveUIDocs/docs/Topics/TopLevelDeclarations/Entities/function"}},l={},s=[{value:"Decorators",id:"decorators",level:2}],p={toc:s};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"decorators"},"Decorators"),(0,r.kt)("p",null,"Decorators are ways to inject behavior into elements that already defined. Example use cases might be we want to track some analytics\nto see how often certain UIs are being used, or we want certain actions to trigger a route state change, or we need a way to\nadd tooltips to elements without refactoring the elements to be tooltip aware."),(0,r.kt)("p",null,"A decorator can accept parameters and can extrude values but defines no body of its own.  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"decorator TrackClicks {\n\n    state int clickCount;\n    \n    mouse:click => clickCount++;\n    \n}\n\n")),(0,r.kt)("p",null,"A decorator can declare the following member types:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Companion "),(0,r.kt)("li",{parentName:"ul"},"Parameters"),(0,r.kt)("li",{parentName:"ul"},"State"),(0,r.kt)("li",{parentName:"ul"},"Attributes"),(0,r.kt)("li",{parentName:"ul"},"Instance Styles"),(0,r.kt)("li",{parentName:"ul"},"Style List"),(0,r.kt)("li",{parentName:"ul"},"Lifecycle handlers"),(0,r.kt)("li",{parentName:"ul"},"Input event handlers"),(0,r.kt)("li",{parentName:"ul"},"Spawn list ")),(0,r.kt)("p",null,"Unlike the other top level declarations, there is no functional style syntax alternative for decorators. Decorators cannot be applied to\n",(0,r.kt)("inlineCode",{parentName:"p"},"decorator")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"function"),"."),(0,r.kt)("p",null,"There is a special extension of ",(0,r.kt)("inlineCode",{parentName:"p"},"decorator")," when you only want it to apply to a ",(0,r.kt)("inlineCode",{parentName:"p"},"typography")," element. In this case the decorator must\nbe declared with ",(0,r.kt)("inlineCode",{parentName:"p"},"decorator typography"),". When doing so, ",(0,r.kt)("inlineCode",{parentName:"p"},"$text")," becomes available to the decorator and a compile error will thrown\nif you attempt to decorate a non ",(0,r.kt)("inlineCode",{parentName:"p"},"typography")," element with this decorator. "),(0,r.kt)("p",null,"A decorator can be applied either to a top-level ",(0,r.kt)("inlineCode",{parentName:"p"},"template")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"typography")," declaration or to invocation, the effect is the same. When\nmultiple decorators are applied to an element, they apply in the order they are used. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"@SomeDecorator\ntemplate SomeTemplate { ... } \n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'template DecoratorExample : DecoratorExample render {\n\n    // lets turn this button into something that is able to switch between menu screens. \n    // We could add a click handler here that does this logic, but it would be better if we \n    // could hook into a menu transition system that we previously created.\n    Button("Take me there!");\n\n    // using a decorator (which can be user defined) we add functionality that intercepts the button click\n    // and invokes our route transition instead. We didn\'t even alter the button to do this\n    @RouterLink("/game/main_menu")\n    Button("Take me there!");\n\n    // Decorators can also accept arbitrary bindings. In this case I extended the Button to also track how many times it was clicked,\n    // And setup an analytics category with an identifier. Button itself didn\'t change at all\n    @TrackClicks(category = "Transitions", identifier = "Go To Main Menu")\n    Button("Take me there!");\n\n    // We can combine as many decorators as we like. Here is the button with both analytics and routing attached\n    @RouterLink("/game/main_menu")\n    @TrackClicks(category = "Transitions", identifier = "Go To Main Menu")\n    Button("Take me there!");\n    \n    // decorators can also extrude their state, this is only valid if the decorator is marked as `persistent`\n    @TrackClicks(category = "Transitions", identifier = "Go To Main Menu") [totalClicks]\n    Button("Clicked: " + totalClicks + " times");\n\n    // decorators can also extrude their `this` value but doing so requires an `as` alias.\n    @TrackClicks(category = "Transitions", identifier = "Go To Main Menu") [$this as clickTracker]\n    Button("Clicked: " + clickTracker.totalClicks + " times");\n}\n')),(0,r.kt)("p",null,"A decorator with no body is valid, has zero runtime impact, and is useful for reflection based used cases like testing, code generation, or authoring environments."))}u.isMDXComponent=!0}}]);