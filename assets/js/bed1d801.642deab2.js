"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[97557],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,b=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(b,i(i({ref:t},p),{},{components:n})):r.createElement(b,i({ref:t},p))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},10928:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={},i="Attributes",l={unversionedId:"Topics/TopLevelDeclarations/Entities/Members/attributes",id:"Topics/TopLevelDeclarations/Entities/Members/attributes",title:"Attributes",description:"Attributes are a way of storing untyped key/value pairs on elements. These generally have two uses: styling and meta data tracking.",source:"@site/docs/Topics/TopLevelDeclarations/Entities/Members/attributes.md",sourceDirName:"Topics/TopLevelDeclarations/Entities/Members",slug:"/Topics/TopLevelDeclarations/Entities/Members/attributes",permalink:"/EvolveUIDocs/docs/Topics/TopLevelDeclarations/Entities/Members/attributes",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"conceptual",previous:{title:"Lifecycle and Identity",permalink:"/EvolveUIDocs/docs/Topics/StructuralIdentity/structural_identity"},next:{title:"Computed Properties",permalink:"/EvolveUIDocs/docs/Topics/TopLevelDeclarations/Entities/Members/computed_properties"}},s={},c=[{value:"As a member declaration",id:"as-a-member-declaration",level:3},{value:"As an invocation member",id:"as-an-invocation-member",level:3},{value:"Using an <code>ElementReference</code>",id:"using-an-elementreference",level:3}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"attributes"},"Attributes"),(0,a.kt)("p",null,"Attributes are a way of storing untyped key/value pairs on elements. These generally have two uses: styling and meta data tracking. "),(0,a.kt)("p",null,"An attribute can be set in a few different ways on elements. "),(0,a.kt)("h3",{id:"as-a-member-declaration"},"As a member declaration"),(0,a.kt)("p",null,"In a top level declaration, you can declare an attribute with the attribute member syntax. ",(0,a.kt)("inlineCode",{parentName:"p"},"attr:")," followed by the key name\nof the attribute optionally followed by a value expression.  The value expression can be any expression that returns a string, boolean value, or enum value."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'template Thing {\n\n    attr:valid;\n    \n    attr:abc = "xyz";\n    \n    attr:someKeyCode = KeyCode.A;\n    \n    attr:somethingBoolean = true;\n    \n    attr:someExpression = ComputeSomething();\n    \n}\n    \n')),(0,a.kt)("h3",{id:"as-an-invocation-member"},"As an invocation member"),(0,a.kt)("p",null,"When applying an attribute to an element invocation, the same rules/apis apply as in the top level declaration member version."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'template Example render {\n\n    SomeElement(attr:valid);\n    \n    SomeElement(attr:abc = "xyz");\n    \n    SomeElement(attr:someKeyCode = KeyCode.A);\n    \n    SomeElement(attr:somethingBoolean = true);\n    \n    SomeElement(attr:someExpression = ComputeSomething());\n    \n    \n')),(0,a.kt)("h3",{id:"using-an-elementreference"},"Using an ",(0,a.kt)("inlineCode",{parentName:"h3"},"ElementReference")),(0,a.kt)("p",null,"When using an ",(0,a.kt)("inlineCode",{parentName:"p"},"ElementReference")," to set attributes you instead use the C# api. There is also an api for reading attributes with\n",(0,a.kt)("inlineCode",{parentName:"p"},"string GetAttribute(string key)")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"bool HasAttribute(string key)"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'\nelementReference.SetAttribute("key", value);\n\n')))}u.isMDXComponent=!0}}]);