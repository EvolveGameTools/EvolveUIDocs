"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[16611],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=u(n),h=i,m=p["".concat(s,".").concat(h)]||p[h]||c[h]||l;return n?a.createElement(m,r(r({ref:t},d),{},{components:n})):a.createElement(m,r({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=h;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:i,r[1]=o;for(var u=2;u<l;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},85124:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var a=n(87462),i=(n(67294),n(3905));const l={},r="Populate the Quest List",o={unversionedId:"Tutorials/QuestLog/populateQuestList",id:"Tutorials/QuestLog/populateQuestList",title:"Populate the Quest List",description:"This document needs an UPGRADE",source:"@site/docs/Tutorials/QuestLog/populateQuestList.mdx",sourceDirName:"Tutorials/QuestLog",slug:"/Tutorials/QuestLog/populateQuestList",permalink:"/EvolveUIDocs/docs/Tutorials/QuestLog/populateQuestList",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorials",previous:{title:"Create and Animate the Quest Filter",permalink:"/EvolveUIDocs/docs/Tutorials/QuestLog/createNavigation"},next:{title:"Show the Quest Details",permalink:"/EvolveUIDocs/docs/Tutorials/QuestLog/showQuestDetails"}},s={},u=[{value:"Bind the data",id:"bind-the-data",level:2},{value:"Create the ScrollView",id:"create-the-scrollview",level:2},{value:"Create the QuestLogItem",id:"create-the-questlogitem",level:2}],d={toc:u};function p(e){let{components:t,...l}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"populate-the-quest-list"},"Populate the Quest List"),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"This document needs an UPGRADE")),(0,i.kt)("p",null,"Now that the click events are being registered, it's time to populate the quest list with data and filter it. By the end, your project should look like this:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"no animation",src:n(6177).Z,width:"1403",height:"868"})),(0,i.kt)("h2",{id:"bind-the-data"},"Bind the data"),(0,i.kt)("p",null,"There is also a small refactor that you'll need to do so that the QuestList has data to display. Open ",(0,i.kt)("inlineCode",{parentName:"p"},"AppRoot.ui")," and update the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'template AppRoot : AppRoot() {  \n    //highlight-start\n    state Quest[] allQuests = MakeQuests();\n    run System.Array.Sort(allQuests);\n\n    state SelectionManager selectionManager = new SelectionManager("selected");\n    //highlight-end\n\n   Div(style = [@header-row]) {\n       Div(style = [@gradient-line]);\n       Text_H1("Quests"); \n       Div(style = [@gradient-line]);\n   }\n   \n   Div(style = [@master-detail-container])\n   {\n       //highlight-start\n        QuestList(selectionManager, questList = allQuests);\n        //highlight-end\n   }\n}\n')),(0,i.kt)("p",null,"Here's what the new code is doing:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SelectionManager")," keeps track of the quest and element that is currently selected to ensure that no two elements both simultaneously have the ",(0,i.kt)("inlineCode",{parentName:"li"},"selected")," attribute applied. You can find the class in the ",(0,i.kt)("strong",{parentName:"li"},"Assets/Evolve/Scripts")," folder."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"MakeQuests()")," is a helper method that generates random quest data for demonstration purposes. In reality, you'd want to assign this real data that is likely coming from a scriptable object or database. The results are stored in ",(0,i.kt)("inlineCode",{parentName:"li"},"allQuests")," state variable, which ensures that ",(0,i.kt)("inlineCode",{parentName:"li"},"MakeQuests()")," is only run once."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"run")," keyword allows you to execute regular C# code inside of the template. In this case, it's sorting the quests."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"QuestList")," template is now passing in the allQuests parameter, which you'll store a reference to and bind to a ",(0,i.kt)("inlineCode",{parentName:"li"},"ScrollView"),".")),(0,i.kt)("p",null,"Open ",(0,i.kt)("inlineCode",{parentName:"p"},"QuestList.ui")," and update the ",(0,i.kt)("inlineCode",{parentName:"p"},"QuestList")," element at the top to include a variable that will store the ",(0,i.kt)("inlineCode",{parentName:"p"},"allQuests")," data and a reference to ",(0,i.kt)("inlineCode",{parentName:"p"},"SelectionManager"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"element QuestList {\n   //highlight-start\n    implicit SelectionManager selectionManager;\n    IList<Quest> questList;\n    //highlight-end\n }\n\ntemplate QuestList : element QuestList {\n    //original code\n}\n")),(0,i.kt)("h2",{id:"create-the-scrollview"},"Create the ScrollView"),(0,i.kt)("p",null,"Since there is a high likelihood that the player will have more quests than what can show on screen, you'll add them all into a ",(0,i.kt)("inlineCode",{parentName:"p"},"ScrollView")," that will be styled to fit the look of the game. To do this, you'll need to update ",(0,i.kt)("inlineCode",{parentName:"p"},"QuestList.ui"),". Add the following code to the end of the template section:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"template QuestList : element QuestList {\n    //Original code above\n\n   //highlight-start  \n    ScrollView(style = [@quest-list]) {\n        foreach(quest in questList, keyFn = (item) => item.Id) {\n            if(quest.Status == status) {\n                QuestLogItem(quest = quest, mouse:click = () {\n                    selectionManager.Select($this, quest);\n                });\n            }\n        }\n    }\n   //highlight-end    \n}\n")),(0,i.kt)("p",null,"Here's what the new code is doing:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ScrollView")," is a standard container that is available in the ",(0,i.kt)("strong",{parentName:"li"},"BasicElements")," module that comes with Evolve. It'll handle generating the ability to scroll for you.  "),(0,i.kt)("li",{parentName:"ul"},"Within ",(0,i.kt)("inlineCode",{parentName:"li"},"ScrollView")," is a loop that will iterate through each item in ",(0,i.kt)("inlineCode",{parentName:"li"},"questList")," and create a new ",(0,i.kt)("inlineCode",{parentName:"li"},"QuestLogItem"),", passing in the quest data and setting a ",(0,i.kt)("inlineCode",{parentName:"li"},"mouse:click")," event that points towards the ",(0,i.kt)("inlineCode",{parentName:"li"},"SelectionManager")," helper class that was included in the starter project.")),(0,i.kt)("p",null,"Finally, you'll need to add the new styles into ",(0,i.kt)("inlineCode",{parentName:"p"},"QuestList.style"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-css"},'const color_ScrollTrack = rgba(75, 75, 75, 255);\n\nstyle quest-log-scroll-knob {\n    PreferredWidth = 6px;\n    Feather = 1px;\n    AlignmentTargetX = Parent;\n    AlignmentOffsetX = -1px;\n    CornerRadius = 50%;\n    BackgroundImageRotation = 270deg;\n    BackgroundImage = linear-gradient("GeneralModule::scrollbar-gradient");\n}\n\nstyle quest-log-scroll-track {\n    PreferredWidth = 3px;\n    AlignmentTargetX = Parent;\n    AlignmentDirectionX = End;\n    AlignmentOffsetX = -12px;\n    BackgroundColor = @color_ScrollTrack;\n}\n')),(0,i.kt)("h2",{id:"create-the-questlogitem"},"Create the QuestLogItem"),(0,i.kt)("p",null,"Next, you'll create the QuestLogItem element that will look like this:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"no animation",src:n(33101).Z,width:"508",height:"219"})),(0,i.kt)("p",null,"Create new UI and Style Files named ",(0,i.kt)("strong",{parentName:"p"},"QuestLogItem"),". Open ",(0,i.kt)("inlineCode",{parentName:"p"},"QuestLogItem.ui")," and add the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using QuestLog;\n\nelement QuestLogItem {\n    Quest quest;\n}\n\ncontainer QuestLogBracket();\n\ntemplate QuestLogItem : element QuestLogItem(attr:completed = quest.IsCompleted) {\n\n    Div(style = [@quest-log-shade]);\n    Div(style = [@quest-log-item-container]) {\n        \n        Text_H2(quest.Title);\n        \n        if(quest.IsCompleted) {\n            \n            Checkbox(isChecked = true);\n        }\n    }\n\n    QuestLogBracket();\n    QuestLogBracket();\n\n}\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"QuestLogBracket")," is a container that will display the two green corner brackets only when the element is selected. Instead of defining the container, you could create a div and manually set the style.")),(0,i.kt)("p",null,"When ",(0,i.kt)("inlineCode",{parentName:"p"},"QuestLogItem")," is first instantiated, it will look at the value of ",(0,i.kt)("inlineCode",{parentName:"p"},"quest.IsCompleted")," and set the completed attribute to either true or false. This will then determine if the style should display as though the quest is active or completed. (You will set these styles shortly.) The rest of the code is pretty straight forward - two ",(0,i.kt)("inlineCode",{parentName:"p"},"Div")," containers are being created and have their styles set. The second ",(0,i.kt)("inlineCode",{parentName:"p"},"Div")," contains the quest title and will show a checkbox if the quest is completed. ",(0,i.kt)("inlineCode",{parentName:"p"},"Checkbox")," is a custom container included in the project."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"You can also set the attribute in the body of the template by calling ",(0,i.kt)("inlineCode",{parentName:"p"},"run $root.SetAttribute()"),". This is handy if you need to alter the value independently of instantiation.")),(0,i.kt)("p",null,"Next, add the following code to the stylesheet:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-css"},'style <QuestLogItem> {\n    PreferredSize = 1bw 1bh;\n    BackgroundImage = "GeneralModule::quest_item_frame";\n    LayoutType = Stack;\n}\n\nstyle quest-log-item-container {\n    LayoutType = Horizontal;\n    SpaceBetweenHorizontal = 1s;\n    PreferredSize = 1s;\n    Padding = 1s 20px;\n    \n    [when:parent attr:selected] {\n        BackgroundImage = "GeneralModule::quest_item_frame_selected";\n    }\n}\n\nstyle quest-log-shade {\n    PreferredSize = 1bw 1bh;\n    Visibility = Hidden;\n    \n    [hover:parent] {\n        Visibility = Visible;\n    }\n    BackgroundImage = "GeneralModule::quest_item_frame_shade";\n\n    [when:parent attr:selected] {\n        BackgroundImage = "GeneralModule::quest_item_frame_selected_shade";\n    }\n}\n\nstyle <QuestLogBracket> {\n    PreferredSize = 1bw 1bh;\n    LayoutBehavior = Ignored;\n    AlignmentTarget = Parent;\n    \n    [when:parent attr:selected] {\n        BackgroundImage = "GeneralModule::quest_item_frame_selected_corner";\n        AlignmentOffset = -8px;\n        \n        [when:last-with-tag(QuestLogBracket)] {\n            BackgroundImageRotation = 180deg;\n            AlignmentDirection = End;\n        }\n    }\n}\n')),(0,i.kt)("p",null,"Most of the style logic is driven by a combination of style queries. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"[when:parent attr:selected]")," ensures that the style is only run if the parent container has the attribute of selected. It is also possible to have nested queries. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"<QuestLogBracket>")," has a ",(0,i.kt)("inlineCode",{parentName:"p"},"[when:parent attr:selected]")," and inside of that style, is another query - ",(0,i.kt)("inlineCode",{parentName:"p"},"[when:last-with-tag(QuestLogBracket)]"),". The nesting will ensure that ",(0,i.kt)("inlineCode",{parentName:"p"},"when:last-with-tag")," styling will be applied if the parent is selected (per the first query) and is the last ",(0,i.kt)("inlineCode",{parentName:"p"},"QuestLogBracket")," container (per the second query)."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"selected")," attribute is driven by the SelectionManager helper code that was included in the project.")),(0,i.kt)("p",null,"Refresh the UI in Unity and you should now have a working quest list."))}p.isMDXComponent=!0},6177:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/populateQuest_Final-95349aa113edf8059d6cd97c99a0cb54.png"},33101:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/questList_ItemView-d11200726082b4094dec63b3bfcc9dfc.png"}}]);