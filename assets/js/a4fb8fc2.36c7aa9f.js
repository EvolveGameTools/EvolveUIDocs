"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[16611],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),h=r,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||i;return n?a.createElement(m,l(l({ref:t},p),{},{components:n})):a.createElement(m,l({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},85124:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return d}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),l=["components"],o={},s="Populate the Quest List",c={unversionedId:"Tutorials/QuestLog/populateQuestList",id:"Tutorials/QuestLog/populateQuestList",title:"Populate the Quest List",description:"Now that the click events are being registered, it's time to populate the quest list with data and filter it. By the end, your project should look like this:",source:"@site/docs/Tutorials/QuestLog/populateQuestList.mdx",sourceDirName:"Tutorials/QuestLog",slug:"/Tutorials/QuestLog/populateQuestList",permalink:"/EvolveUIDocs/docs/Tutorials/QuestLog/populateQuestList",tags:[],version:"current",frontMatter:{},sidebar:"tutorials",previous:{title:"Create and Animate the Quest Filter",permalink:"/EvolveUIDocs/docs/Tutorials/QuestLog/createNavigation"},next:{title:"Show the Quest Details",permalink:"/EvolveUIDocs/docs/Tutorials/QuestLog/showQuestDetails"}},p={},d=[{value:"Configure the References",id:"configure-the-references",level:2},{value:"Bind the data",id:"bind-the-data",level:2},{value:"Create the ScrollView",id:"create-the-scrollview",level:2},{value:"Create the QuestLogItem",id:"create-the-questlogitem",level:2},{value:"Create the Checkbox",id:"create-the-checkbox",level:2}],u={toc:d};function h(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"populate-the-quest-list"},"Populate the Quest List"),(0,i.kt)("p",null,"Now that the click events are being registered, it's time to populate the quest list with data and filter it. By the end, your project should look like this:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://picsum.photos/id/1025/400",alt:"Example banner"})),(0,i.kt)("h2",{id:"configure-the-references"},"Configure the References"),(0,i.kt)("p",null,"There are seven new texture assets that will be used in this section, which you'll need to setup in the ",(0,i.kt)("strong",{parentName:"p"},"Textures")," section of ",(0,i.kt)("strong",{parentName:"p"},"QuestLogModule"),". Open the module and set the following properties. Make sure to leave the ",(0,i.kt)("strong",{parentName:"p"},"border")," to ",(0,i.kt)("strong",{parentName:"p"},"0")," for all of them."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Asset_Id")," & ",(0,i.kt)("strong",{parentName:"li"},"Texture"),": quest_item_frame_selected"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Asset_Id")," & ",(0,i.kt)("strong",{parentName:"li"},"Texture"),": quest_item_frame"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Asset_Id")," & ",(0,i.kt)("strong",{parentName:"li"},"Texture"),": quest_item_frame_shade"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Asset_Id")," & ",(0,i.kt)("strong",{parentName:"li"},"Texture"),": quest_item_frame_selected_shade "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Asset_Id")," & ",(0,i.kt)("strong",{parentName:"li"},"Texture"),": quest_item_frame_selected_corner "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Asset_Id")," & ",(0,i.kt)("strong",{parentName:"li"},"Texture"),": checkbox_colorized"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Asset_Id")," & ",(0,i.kt)("strong",{parentName:"li"},"Texture"),": checkbox_greyscale_checked")),(0,i.kt)("h2",{id:"bind-the-data"},"Bind the data"),(0,i.kt)("p",null,"There is also a small refactor that you'll need to do so that the QuestList has data to display. Open ",(0,i.kt)("inlineCode",{parentName:"p"},"AppRoot.ui")," and update the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'template AppRoot : AppRoot() {  \n    //highlight-start\n    state Quest[] allQuests = MakeQuests();\n    run System.Array.Sort(allQuests);\n\n    state SelectionManager selectionManager = new SelectionManager("selected");\n    //highlight-end\n\n   Div(style = [@header-row]) {\n       Div(style = [@gradient-line]);\n       Text_H1("Quests"); \n       Div(style = [@gradient-line]);\n   }\n   \n   Div(style = [@master-detail-container])\n   {\n       //highlight-start\n        QuestList(selectionManager, questList = allQuests);\n        //highlight-end\n   }\n}\n')),(0,i.kt)("p",null,"Here's what the new code is doing:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SelectionManager")," keeps track of the quest and element that is currently selected to ensure that no two elements both simultaneously have the ",(0,i.kt)("inlineCode",{parentName:"li"},"selected")," attribute applied. You can find the class in the ",(0,i.kt)("strong",{parentName:"li"},"Assets/Evolve/Scripts")," folder."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"MakeQuests()")," is a helper method that generates random quest data for demonstration purposes. In reality, you'd want to assign this real data that is likely coming from a scriptable object or database. The results are stored in ",(0,i.kt)("inlineCode",{parentName:"li"},"allQuests")," state variable, which ensures that ",(0,i.kt)("inlineCode",{parentName:"li"},"MakeQuests()")," is only run once."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"run")," keyword allows you to execute regular C# code inside of the template. In this case, it's sorting the quests."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"QuestList")," template is now passing in the allQuests parameter, which you'll store a reference to and bind to a ",(0,i.kt)("inlineCode",{parentName:"li"},"ScrollView"),".")),(0,i.kt)("p",null,"Open ",(0,i.kt)("inlineCode",{parentName:"p"},"QuestList.ui")," and update the QuestList element to include a variable that will store the ",(0,i.kt)("inlineCode",{parentName:"p"},"allQuests")," data and a reference to ",(0,i.kt)("inlineCode",{parentName:"p"},"SelectionManager"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"element QuestList {\n   //highlight-start\n    implicit SelectionManager selectionManager;\n    IList<Quest> questList;\n    //highlight-end\n }\n")),(0,i.kt)("h2",{id:"create-the-scrollview"},"Create the ScrollView"),(0,i.kt)("p",null,"Since there is a high likelyhood that the player will have more quests than what can show on screen, you'll add them all into a ",(0,i.kt)("inlineCode",{parentName:"p"},"ScrollView")," that will be styled to fit the look of the game. To do this, you'll need to update ",(0,i.kt)("inlineCode",{parentName:"p"},"QuestList.ui"),". Add the following code to the end of the template section:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"template QuestList : element QuestList {\n    //Original code above\n\n   //highlight-start\n    state ScrollSettings scrollSettings = new ScrollSettings() {\n        verticalTrackStyle = @quest-log-scroll-track,\n        verticalHandleStyle = @quest-log-scroll-knob\n    };\n    \n    ScrollView(scrollSettings, style = [@quest-list]) {\n        foreach(quest in questList, keyFn = (item) => item.Id) {\n            if(quest.Status == status) {\n                QuestLogItem(quest = quest, mouse:click = () {\n                    selectionManager.Select($this, quest);\n                });\n            }\n        }\n    }\n   //highlight-end    \n}\n")),(0,i.kt)("p",null,"Here's what the new code is doing:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ScrollView")," is a standard container that optionally takes ",(0,i.kt)("inlineCode",{parentName:"li"},"ScrollSettings")," property. It'll handle generating the ability to scroll for you. ",(0,i.kt)("inlineCode",{parentName:"li"},"ScrollSettings")," is an optional field that you can use to customize the styling for the vertical track and handle. In this case, it's pointing to two new styles that you'll add into ",(0,i.kt)("inlineCode",{parentName:"li"},"QuestList.style")," shortly. "),(0,i.kt)("li",{parentName:"ul"},"Within ",(0,i.kt)("inlineCode",{parentName:"li"},"ScrollView")," is a loop that will iterate through each item in ",(0,i.kt)("inlineCode",{parentName:"li"},"questList")," and create a new ",(0,i.kt)("inlineCode",{parentName:"li"},"QuestLogItem"),", passing in the quest data and setting a ",(0,i.kt)("inlineCode",{parentName:"li"},"mouse:click")," event that points towards the ",(0,i.kt)("inlineCode",{parentName:"li"},"SelectionManager")," helper class that was included in the starter project.")),(0,i.kt)("p",null,"Finally, you'll need to add the new styles into ",(0,i.kt)("inlineCode",{parentName:"p"},"QuestList.style"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-css"},'const color_ScrollTrack = rgba(75, 75, 75, 255);\n\nstyle <QuestList> {\n    PreferredHeight = 1s;\n}\n\nstyle quest-list {\n    SpaceBetweenVertical = 10px;\n}\n\nstyle quest-log-scroll-knob {\n    PreferredWidth = 6px;\n    Feather = 1px;\n    AlignmentTargetX = Parent;\n    AlignmentOffsetX = -1px;\n    CornerRadius = 50%;\n    BackgroundImageRotation = 270deg;\n    BackgroundImage = linear-gradient("scrollbar-gradient");\n}\n\nstyle quest-log-scroll-track {\n    PreferredWidth = 3px;\n    AlignmentTargetX = Parent;\n    AlignmentDirectionX = End;\n    AlignmentOffsetX = -12px;\n    BackgroundColor = @color_ScrollTrack;\n}\n')),(0,i.kt)("h2",{id:"create-the-questlogitem"},"Create the QuestLogItem"),(0,i.kt)("p",null,"Next you'll create the QuestLogItem element that will look like this:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://picsum.photos/id/1025/400",alt:"Example banner"})),(0,i.kt)("p",null,"Right click on the ",(0,i.kt)("strong",{parentName:"p"},"UserInterface")," folder and select ",(0,i.kt)("strong",{parentName:"p"},"Create")," > ",(0,i.kt)("strong",{parentName:"p"},"Evolve")," > ",(0,i.kt)("strong",{parentName:"p"},"UI File"),". Name it ",(0,i.kt)("strong",{parentName:"p"},"QuestLogItem")," and check ",(0,i.kt)("strong",{parentName:"p"},"Create Style")," and ",(0,i.kt)("strong",{parentName:"p"},"Create Files in Directory"),". Open the template and add the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using QuestLog;\n\nelement QuestLogItem {\n    Quest quest;\n}\n\ncontainer QuestLogBracket();\n\ntemplate QuestLogItem : element QuestLogItem(attr:completed = quest.IsCompleted) {\n\n    Div(style = [@quest-log-shade]);\n    Div(style = [@quest-log-item-container]) {\n        \n        Text_H2(quest.Title);\n        \n        if(quest.IsCompleted) {\n            \n            Checkbox(isChecked = true);\n        }\n    }\n\n    QuestLogBracket();\n    QuestLogBracket();\n\n}\n")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("inlineCode",{parentName:"p"},"QuestLogBracket")," is a container that will display the two green corner brackets only when the element is selected. Instead of defining the container, you could create a div and manually set the style."))),(0,i.kt)("p",null,"When QuestLogItem is first instantiated, it will look at the value of ",(0,i.kt)("inlineCode",{parentName:"p"},"quest.IsCompleted")," and set the completed attribute to either true or false. This will then determine if the style should display as though the quest is active or completed. (You will set these styles shortly.) The rest of the code is pretty straight forward - two Div containers are being created and have their styles set. The seecond Div contains the quest title and will show a checkbox if the quest is completed. The Checkbox is a container that does not exist, so you'll create that shortly."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You can also set the attribute in the body of the template by calling ",(0,i.kt)("inlineCode",{parentName:"p"},"run $root.SetAttribute()"),". This is handy if you need to alter the value independentally of instantiation."))),(0,i.kt)("p",null,"Next, add the following code to the stylesheet:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-css"},'style <QuestLogItem> {\n    PreferredSize = 1bw 1bh;\n    BackgroundImage = "quest_item_frame";\n    LayoutType = Stack;\n}\n\nstyle quest-log-item-container {\n    LayoutType = Horizontal;\n    SpaceBetweenHorizontal = 1s;\n    PreferredSize = 1s;\n    Padding = 1s 20px;\n    \n    [when:parent attr:selected] {\n        BackgroundImage = "quest_item_frame_selected";\n    }\n}\n\nstyle quest-log-shade {\n    PreferredSize = 1bw 1bh;\n    Visibility = Hidden;\n    \n    [hover:parent] {\n        Visibility = Visible;\n    }\n    BackgroundImage = "quest_item_frame_shade";\n\n    [when:parent attr:selected] {\n        BackgroundImage = "quest_item_frame_selected_shade";\n    }\n}\n\nstyle <QuestLogBracket> {\n    PreferredSize = 1bw 1bh;\n    LayoutBehavior = Ignored;\n    AlignmentTarget = Parent;\n    \n    [when:parent attr:selected] {\n        BackgroundImage = "quest_item_frame_selected_corner";\n        AlignmentOffset = -8px;\n        \n        [when:last-with-tag(QuestLogBracket)] {\n            BackgroundImageRotation = 180deg;\n            AlignmentDirection = End;\n        }\n    }\n}\n')),(0,i.kt)("p",null,"Most of the style logic is driven by a combination of different style queries. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"[when:parent attr:selected]")," ensures that the style is only run if the parent container has the attribute of selected. It is also possible to have nested queries. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"<QuestLogBracket>")," has a ",(0,i.kt)("inlineCode",{parentName:"p"},"[when:parent attr:selected]")," and inside of that style, is another query - ",(0,i.kt)("inlineCode",{parentName:"p"},"[when:last-with-tag(QuestLogBracket)]"),". The nesting will ensure that ",(0,i.kt)("inlineCode",{parentName:"p"},"when:last-with-tag")," styling will be applied if the parent is selected (per the first query) and is the last ",(0,i.kt)("inlineCode",{parentName:"p"},"QuestLogBracket")," container (per the second query)."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"selected")," attribute is driven by the SelectionManager helper code that was included in the project."))),(0,i.kt)("h2",{id:"create-the-checkbox"},"Create the Checkbox"),(0,i.kt)("p",null,"Next you'll create the ",(0,i.kt)("inlineCode",{parentName:"p"},"Checkbox")," container that ",(0,i.kt)("inlineCode",{parentName:"p"},"QuestLogItem")," references. Right click on the ",(0,i.kt)("strong",{parentName:"p"},"UserInterface")," folder and select ",(0,i.kt)("strong",{parentName:"p"},"Create")," > ",(0,i.kt)("strong",{parentName:"p"},"Evolve")," > ",(0,i.kt)("strong",{parentName:"p"},"UI File"),". Name it ",(0,i.kt)("strong",{parentName:"p"},"Checkbox")," and check ",(0,i.kt)("strong",{parentName:"p"},"Create Style")," and ",(0,i.kt)("strong",{parentName:"p"},"Create Files in Directory"),". Open the template and add the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"element Checkbox {\n    bool isChecked;\n}\n\ncontainer Checkbox : element Checkbox();\n")),(0,i.kt)("p",null,"Next, add the following CSS:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-css"},'style <Checkbox> {\n    PreferredSize = 1bw 1bh;\n    BackgroundImage = "checkbox_greyscale_checked";    \n    \n    [attr:colorized] {\n        BackgroundImage = "checkbox_colorized";\n        \n        [attr:checked] {\n            BackgroundImage = "checkbox_greyscale_checked";    \n        }\n    }\n    \n    [attr:checked] {\n        BackgroundImage = "checkbox_greyscale_checked";    \n    }\n}\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Checkbox")," is an element that will be used in two places. For the ",(0,i.kt)("inlineCode",{parentName:"p"},"QuestLogItem"),", it'll only be visible for completed quests. However, in the next section you'll control more granular attributes that will alter the ",(0,i.kt)("inlineCode",{parentName:"p"},"BackgroundImage")," depending on if the task is completed or not. "),(0,i.kt)("p",null,"That's it! Run or reload the project and toggle between the filtered states and selecting an item. The next section will display more data related to the quest item picked."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://picsum.photos/id/1025/400",alt:"Example banner"})))}h.isMDXComponent=!0}}]);