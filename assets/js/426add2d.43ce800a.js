"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[37235],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,y=u["".concat(i,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(y,l(l({ref:t},c),{},{components:n})):r.createElement(y,l({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:a,l[1]=s;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},98054:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={},l="Render Block",s={unversionedId:"templates/body_block/render_block",id:"templates/body_block/render_block",title:"Render Block",description:"Within a render block you declare the structure of your UI elements and optionally run inline logic.",source:"@site/docs/templates/body_block/render_block.md",sourceDirName:"templates/body_block",slug:"/templates/body_block/render_block",permalink:"/EvolveUIDocs/docs/templates/body_block/render_block",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"conceptual",previous:{title:"Markers",permalink:"/EvolveUIDocs/docs/templates/body_block/markers"},next:{title:"Portals & Teleportation",permalink:"/EvolveUIDocs/docs/templates/body_block/teleportation"}},i={},p=[{value:"Parameter",id:"parameter",level:2},{value:"Const",id:"const",level:2},{value:"Decorators",id:"decorators",level:2},{value:"Input Handlers",id:"input-handlers",level:2},{value:"Lifecycle Handlers",id:"lifecycle-handlers",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"render-block"},"Render Block"),(0,a.kt)("p",null,"Within a ",(0,a.kt)("inlineCode",{parentName:"p"},"render")," block you declare the structure of your UI elements and optionally run inline logic. "),(0,a.kt)("p",null,"There are four basic entity types that are usable inside a ",(0,a.kt)("inlineCode",{parentName:"p"},"render"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"template"),(0,a.kt)("li",{parentName:"ul"},"typography"),(0,a.kt)("li",{parentName:"ul"},"function"),(0,a.kt)("li",{parentName:"ul"},"decorators")),(0,a.kt)("p",null,"A template is the bread and butter of Evolve, it is by far the most used entity type. "),(0,a.kt)("p",null,"To render a template, all you need to do is refer to it by name"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"render {\n    SomeTemplate();\n    \n    AnotherTemplate();\n}\n\n")),(0,a.kt)("p",null,"Just like you can add custom behavior while declaring a template, you can also add custom behavior when rendering. "),(0,a.kt)("p",null,"Here are the things you can customize"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"parameters"),(0,a.kt)("li",{parentName:"ul"},"attributes"),(0,a.kt)("li",{parentName:"ul"},"styles"),(0,a.kt)("li",{parentName:"ul"},"instance styles"),(0,a.kt)("li",{parentName:"ul"},"lifecycle handlers"),(0,a.kt)("li",{parentName:"ul"},"input handlers"),(0,a.kt)("li",{parentName:"ul"},"onChange handlers"),(0,a.kt)("li",{parentName:"ul"},"decorators")),(0,a.kt)("h2",{id:"parameter"},"Parameter"),(0,a.kt)("p",null,"Passing a parameter to an entity is simple: just provide an expression and optionally a key. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"render {\n    NumberInput<int>(value = 10);\n}\n")),(0,a.kt)("p",null,"Parameters are passed following the same methodology as C# named arguments. "),(0,a.kt)("p",null,"Sometimes you want to pass a value into an entity and then later read that same value back out.\nOne easy way to do this is with a ",(0,a.kt)("inlineCode",{parentName:"p"},"sync")," modifier. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"render {\n    state int someValue = 10;\n    NumberInput<int>(sync:value = someValue);\n    // after the NumberInput completes its update, `someValue` will be set to the same value as the NumberInput's `value` parameter\n    run Debug.Log(someValue);\n}\n")),(0,a.kt)("h2",{id:"const"},"Const"),(0,a.kt)("p",null,"Because Evolve re-executes your templates every frame, there are cases where you need to allocate memory\nor perform some other expensive operation, but only want to do it once. In these cases you can apply a\n",(0,a.kt)("inlineCode",{parentName:"p"},"const")," modifier to your parameter, attribute, or instance style expression."),(0,a.kt)("p",null,"Note that when you pass in a lambda expression as a parameter, Evolve automatically adds a ",(0,a.kt)("inlineCode",{parentName:"p"},"const")," for you. "),(0,a.kt)("p",null,"Const cannot be used when ",(0,a.kt)("inlineCode",{parentName:"p"},"sync")," is present."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"render {\n\n    SomeElementA(const value = SomeExpensiveOperation());\n    \n    // const is implicitly added for you because of the lambda declaration\n    SomeElementB(action = () => SomeExpensiveOperation());\n    \n    // adding const yourself is not an error but is not nessessary\n    SomeElementB(const action = () => SomeExpensiveOperation());\n    \n}\n")),(0,a.kt)("h2",{id:"decorators"},"Decorators"),(0,a.kt)("h2",{id:"input-handlers"},"Input Handlers"),(0,a.kt)("h2",{id:"lifecycle-handlers"},"Lifecycle Handlers"))}u.isMDXComponent=!0}}]);