"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2334],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=o,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},47021:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const a={},i=void 0,s={unversionedId:"Topics/TopLevelDeclarations/Entities/Members/spawns",id:"Topics/TopLevelDeclarations/Entities/Members/spawns",title:"spawns",description:"Spawns",source:"@site/docs/Topics/TopLevelDeclarations/Entities/Members/spawns.md",sourceDirName:"Topics/TopLevelDeclarations/Entities/Members",slug:"/Topics/TopLevelDeclarations/Entities/Members/spawns",permalink:"/EvolveUIDocs/docs/Topics/TopLevelDeclarations/Entities/Members/spawns",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"conceptual",previous:{title:"Slots",permalink:"/EvolveUIDocs/docs/Topics/TopLevelDeclarations/Entities/Members/slots"},next:{title:"Top level state",permalink:"/EvolveUIDocs/docs/Topics/TopLevelDeclarations/Entities/Members/state"}},l={},c=[],p={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Spawns"),(0,o.kt)("p",null,"Evolve will only compile templates into a build which are reachable from the main entry point of an application."),(0,o.kt)("p",null,"This is generally very desirable because it means we don't include things that are not used which saves on both\ncompile time and code size. Occasionally you'll want to spawn something like a 'window' where the content of that\nwindow isn't directly reachable by traversing all of the templates/typography usages from the entry point."),(0,o.kt)("p",null,"In cases like this, there is a way to force a template to be included in a build even if it is not directly referenced. This\nelement is then traversed just like the entry point to find all of the templates that should be included in a build."),(0,o.kt)("p",null,"To do this, you can declare a ",(0,o.kt)("inlineCode",{parentName:"p"},"spawns")," member in any top level declaration. The syntax accepts a list of\nqualified names of templates. These names are resolved using the usual import resolution rules, so you may\nor may not need to include the specific module names depending on your application."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"template WindowSpawner {\n\n    spawns [SomeModule::TemplateName, AnotherTemplate];\n\n    render { ... } \n\n}\n")))}u.isMDXComponent=!0}}]);