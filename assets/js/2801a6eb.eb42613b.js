"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[47607],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=d(n),u=r,k=c["".concat(p,".").concat(u)]||c[u]||m[u]||l;return n?a.createElement(k,i(i({ref:t},s),{},{components:n})):a.createElement(k,i({ref:t},s))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var d=2;d<l;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},35901:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const l={},i="Built In Variables",o={unversionedId:"Topics/builtins",id:"Topics/builtins",title:"Built In Variables",description:"Evolve supplies a small handful of built in variables. Some are available everywhere and some",source:"@site/docs/Topics/builtins.md",sourceDirName:"Topics",slug:"/Topics/builtins",permalink:"/EvolveUIDocs/docs/Topics/builtins",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"conceptual",previous:{title:"Using Statements",permalink:"/EvolveUIDocs/docs/Topics/TopLevelDeclarations/using"},next:{title:"element_reference",permalink:"/EvolveUIDocs/docs/Topics/element_reference"}},p={},d=[{value:"<code>$root</code>, <code>$element</code>, and <code>$parent</code>",id:"root-element-and-parent",level:2}],s={toc:d};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"built-in-variables"},"Built In Variables"),(0,r.kt)("p",null,"Evolve supplies a small handful of built in variables. Some are available everywhere and some\nare available contextually. Referring to a built in that is not available in the context that your\ncode is in will result in a compile error. "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Identifier"),(0,r.kt)("th",{parentName:"tr",align:null},"Always Available"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"$runtime")),(0,r.kt)("td",{parentName:"tr",align:null},"yes"),(0,r.kt)("td",{parentName:"tr",align:null},"This provides a reference to the runtime. See ",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/UIRuntime"},"UIRuntime")," for api listings")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"$root")),(0,r.kt)("td",{parentName:"tr",align:null},"no"),(0,r.kt)("td",{parentName:"tr",align:null},"Resolves to the top level ",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/ElementReference"},"ElementReference")," in a template declaration")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"$element")),(0,r.kt)("td",{parentName:"tr",align:null},"no"),(0,r.kt)("td",{parentName:"tr",align:null},"Resolves to the 'current' ",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/ElementReference"},"ElementReference"),". Not available in top level function declarations or outside of an element context (ie inside a render block but part of a specific element)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"$parent")),(0,r.kt)("td",{parentName:"tr",align:null},"no"),(0,r.kt)("td",{parentName:"tr",align:null},"Resolves to the 'current' element's parent ",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/ElementReference"},"ElementReference"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"`$oldValue"),(0,r.kt)("td",{parentName:"tr",align:null},"no"),(0,r.kt)("td",{parentName:"tr",align:null},"Available inside change handlers, refers the previous value")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"`$newValue"),(0,r.kt)("td",{parentName:"tr",align:null},"no"),(0,r.kt)("td",{parentName:"tr",align:null},"Available inside change handlers, refers to the new value")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"`$companion"),(0,r.kt)("td",{parentName:"tr",align:null},"no"),(0,r.kt)("td",{parentName:"tr",align:null},"Avaiable in any top level declaration that also supplied a companion type. Refers to the companion instance")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"$text")),(0,r.kt)("td",{parentName:"tr",align:null},"no"),(0,r.kt)("td",{parentName:"tr",align:null},"Available inside ",(0,r.kt)("inlineCode",{parentName:"td"},"typography")," elements and typography decorators. Resolves to the current ",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/TextReference"},"TextReference"))))),(0,r.kt)("h2",{id:"root-element-and-parent"},(0,r.kt)("inlineCode",{parentName:"h2"},"$root"),", ",(0,r.kt)("inlineCode",{parentName:"h2"},"$element"),", and ",(0,r.kt)("inlineCode",{parentName:"h2"},"$parent")),(0,r.kt)("p",null,"When inside of a top level declarations (except for ",(0,r.kt)("inlineCode",{parentName:"p"},"function"),") you can always use ",(0,r.kt)("inlineCode",{parentName:"p"},"$element")," to get the current element reference.\nInside of a ",(0,r.kt)("inlineCode",{parentName:"p"},"render")," block, ",(0,r.kt)("inlineCode",{parentName:"p"},"$element")," becomes contextual based on where it is used and is only valid inside a binding expression.\nIt is not valid inside a ",(0,r.kt)("inlineCode",{parentName:"p"},"create"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"run"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"enable"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"var"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"state"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"repeat"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," or any other expression that is not related to a\nproperty or lifecycle binding."),(0,r.kt)("p",null,"In a given element usage like ",(0,r.kt)("inlineCode",{parentName:"p"},'Text("xyz")'),", the ",(0,r.kt)("inlineCode",{parentName:"p"},"$element")," reference becomes available inside of bindings."),(0,r.kt)("p",null,"When inside of a ",(0,r.kt)("inlineCode",{parentName:"p"},"render")," block, you can refer to ",(0,r.kt)("inlineCode",{parentName:"p"},"$root")," to get an\nElementReference for the current template root, in the example below it would point at ",(0,r.kt)("inlineCode",{parentName:"p"},"Thing"),"."),(0,r.kt)("p",null,"You can also use ",(0,r.kt)("inlineCode",{parentName:"p"},"$parent")," to refer to an element's parent. This is available everywhere that ",(0,r.kt)("inlineCode",{parentName:"p"},"$element")," is valid and always points to\nthe currently executing element's parent."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'template Thing {\n\n    before:update => {\n        $element.SetAttribute("ticked", true); // in a top level declaration $element points to Thing\n    }\n     \n    render {\n    \n        Text($"the element is {$element}"); // refers to the Text element\n        Text($"the element is {$root}"); // refers to the Thing, which is the template root\n        \n        run $element.SetAttribute("illegal", true); // $element points nowhere, this is not allowed\n        run $root.SetAttribute("illegal", false); // $root points to Thing, totally fine\n        \n        run $parent.SetAttribute("fine, "yep"); // $parent points at Thing\'s parent. this MAY be invalid if Thing is a view root and has no parent. \n        \n        Element1(value = $parent) { // $parent == Thing\n           Element2(value = $parent) { // $parent == Element1\n        }\n        \n    }\n}\n')),(0,r.kt)("p",null,"Inside of a decorator, ",(0,r.kt)("inlineCode",{parentName:"p"},"$element")," points to the element being decorated."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"decorator SomeDecorator {\n\n    before:update => $element.stlye.BackgroundColor = `red`;\n    \n}\n")))}c.isMDXComponent=!0}}]);