"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[37356],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),i=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=i(e.components);return a.createElement(p.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=d(e,["components","mdxType","originalType","parentName"]),s=i(n),g=r,c=s["".concat(p,".").concat(g)]||s[g]||m[g]||o;return n?a.createElement(c,l(l({ref:t},u),{},{components:n})):a.createElement(c,l({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=g;var d={};for(var p in t)hasOwnProperty.call(t,p)&&(d[p]=t[p]);d.originalType=e,d[s]="string"==typeof e?e:r,l[1]=d;for(var i=2;i<o;i++)l[i]=n[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},811:(e,t,n)=>{n.d(t,{ZP:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={toc:[{value:"Drag Event Types",id:"drag-event-types",level:3}]};function l(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"drag-event-types"},"Drag Event Types"),(0,r.kt)("p",null,"Drag create is a special snowflake because it accepts a ",(0,r.kt)("inlineCode",{parentName:"p"},"MouseInputEvent")," and expects to return an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"DragEvent"),".\nAll other drag handlers conform to the same signature requirements. If you omit a drag event type (listed as ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," in the table below),\nthen these events will fire any drag event type."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Event Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Mapping Method Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"drag:create")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/DragEvent"},"DragEvent")," OnDragCreate(",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/MouseInputEvent"},"MouseInputEvent)"),")"),(0,r.kt)("td",{parentName:"tr",align:null},"Fires when a drag could begin. Returning null will not start a drag. Returning any other subclass of ",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/DragEvent"},"DragEvent")," will being a drag.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"drag:move<T>")),(0,r.kt)("td",{parentName:"tr",align:null},"OnDragMove(",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/DragEvent"},"DragEvent"),")"),(0,r.kt)("td",{parentName:"tr",align:null},"Fires when a drag of type ",(0,r.kt)("inlineCode",{parentName:"td"},"T")," moves across this element")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"drag:hover<T>")),(0,r.kt)("td",{parentName:"tr",align:null},"OnDragHover(",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/DragEvent"},"DragEvent"),")"),(0,r.kt)("td",{parentName:"tr",align:null},"Fires when a drag of type ",(0,r.kt)("inlineCode",{parentName:"td"},"T")," hovers over this element")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"drag:update<T>")),(0,r.kt)("td",{parentName:"tr",align:null},"OnDragUpdate(",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/DragEvent"},"DragEvent"),")"),(0,r.kt)("td",{parentName:"tr",align:null},"Fires when a drag of type ",(0,r.kt)("inlineCode",{parentName:"td"},"T")," moves or hovers over this element")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"drag:enter<T>")),(0,r.kt)("td",{parentName:"tr",align:null},"OnDragEnter(",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/DragEvent"},"DragEvent"),")"),(0,r.kt)("td",{parentName:"tr",align:null},"Fires when a drag of type ",(0,r.kt)("inlineCode",{parentName:"td"},"T")," enters this element")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"drag:exit<T>")),(0,r.kt)("td",{parentName:"tr",align:null},"OnDragExit(",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/DragEvent"},"DragEvent"),")"),(0,r.kt)("td",{parentName:"tr",align:null},"Fires when a drag of type ",(0,r.kt)("inlineCode",{parentName:"td"},"T")," exits this element")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"drag:drop<T>")),(0,r.kt)("td",{parentName:"tr",align:null},"OnDragDrop(",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/DragEvent"},"DragEvent"),")"),(0,r.kt)("td",{parentName:"tr",align:null},"Fires when a drop event of type ",(0,r.kt)("inlineCode",{parentName:"td"},"T")," occurs on this element")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"drag:cancel<T>")),(0,r.kt)("td",{parentName:"tr",align:null},"OnDragCancel(",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/DragEvent"},"DragEvent"),")"),(0,r.kt)("td",{parentName:"tr",align:null},"Fires when a drag event of type ",(0,r.kt)("inlineCode",{parentName:"td"},"T")," is canceled on this element")))))}l.isMDXComponent=!0},97500:(e,t,n)=>{n.d(t,{ZP:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={toc:[]};function l(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Event Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Mapping Method Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"focus:gain")),(0,r.kt)("td",{parentName:"tr",align:null},"OnFocusGained(",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/FocusChangeEvent"},"FocusChangeEvent"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"focus:lost")),(0,r.kt)("td",{parentName:"tr",align:null},"OnFocusLost(",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/FocusChangeEvent"},"FocusChangeEvent"),")")))))}l.isMDXComponent=!0},35339:(e,t,n)=>{n.d(t,{ZP:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={toc:[]};function l(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Event Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Mapping Method Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"key:down")),(0,r.kt)("td",{parentName:"tr",align:null},"OnKeyDown(",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/KeyboardInputEvent"},"KeyboardInputEvent"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"key:heldDown")),(0,r.kt)("td",{parentName:"tr",align:null},"OnKeyHeldDown(",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/KeyboardInputEvent"},"KeyboardInputEvent"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"key:up")),(0,r.kt)("td",{parentName:"tr",align:null},"OnKeyUp(",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/KeyboardInputEvent"},"KeyboardInputEvent"),")")))))}l.isMDXComponent=!0},8136:(e,t,n)=>{n.d(t,{ZP:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={toc:[]};function l(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Event Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Method Mapping Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mouse:enter")),(0,r.kt)("td",{parentName:"tr",align:null},"OnMouseEnter(",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/MouseInputEvent"},"MouseInputEvent"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mouse:exit")),(0,r.kt)("td",{parentName:"tr",align:null},"OnMouseExit(",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/MouseInputEvent"},"MouseInputEvent"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mouse:up")),(0,r.kt)("td",{parentName:"tr",align:null},"OnMouseUp(",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/MouseInputEvent"},"MouseInputEvent"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mouse:down")),(0,r.kt)("td",{parentName:"tr",align:null},"OnMouseDown(",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/MouseInputEvent"},"MouseInputEvent"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mouse:heldDown")),(0,r.kt)("td",{parentName:"tr",align:null},"OnMouseHeldDown(",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/MouseInputEvent"},"MouseInputEvent"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mouse:move")),(0,r.kt)("td",{parentName:"tr",align:null},"OnMouseMove(",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/MouseInputEvent"},"MouseInputEvent"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mouse:hover")),(0,r.kt)("td",{parentName:"tr",align:null},"OnMouseHover(",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/MouseInputEvent"},"MouseInputEvent"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mouse:context")),(0,r.kt)("td",{parentName:"tr",align:null},"OnMouseContext(",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/MouseInputEvent"},"MouseInputEvent"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mouse:scroll")),(0,r.kt)("td",{parentName:"tr",align:null},"OnMouseScroll(",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/MouseInputEvent"},"MouseInputEvent"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mouse:click")),(0,r.kt)("td",{parentName:"tr",align:null},"OnMouseClick(",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/MouseInputEvent"},"MouseInputEvent"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mouse:update")),(0,r.kt)("td",{parentName:"tr",align:null},"OnMouseUpdate(",(0,r.kt)("a",{parentName:"td",href:"/docs/api_generated/uncategorized_generated/MouseInputEvent"},"MouseInputEvent"),")")))))}l.isMDXComponent=!0},72863:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>u,default:()=>k,frontMatter:()=>i,metadata:()=>s,toc:()=>g});var a=n(87462),r=(n(67294),n(3905)),o=n(97500),l=n(811),d=n(35339),p=n(8136);const i={},u="Input Handlers",s={unversionedId:"templates/top_level_declarations/members/input_handlers",id:"templates/top_level_declarations/members/input_handlers",title:"Input Handlers",description:"Input is handled inline as your templates execute in an immediate mode style. There are three phases to input:",source:"@site/docs/templates/top_level_declarations/members/input_handlers.md",sourceDirName:"templates/top_level_declarations/members",slug:"/templates/top_level_declarations/members/input_handlers",permalink:"/EvolveUIDocs/docs/templates/top_level_declarations/members/input_handlers",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"conceptual",previous:{title:"Computed Properties",permalink:"/EvolveUIDocs/docs/templates/top_level_declarations/members/computed_properties"},next:{title:"Instance Styles",permalink:"/EvolveUIDocs/docs/templates/top_level_declarations/members/instance_style"}},m={},g=[{value:"Propagation",id:"propagation",level:3},{value:"Using <code>from</code> with input events",id:"using-from-with-input-events",level:3},{value:"Mouse Event Types",id:"mouse-event-types",level:3},{value:"Keyboard Event Types",id:"keyboard-event-types",level:3},{value:"Focus Event Types",id:"focus-event-types",level:3},{value:"Drag Event Types",id:"drag-event-types",level:3}],c={toc:g};function k(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"input-handlers"},"Input Handlers"),(0,r.kt)("p",null,"Input is handled inline as your templates execute in an immediate mode style. There are three phases to input:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BeforeUpdate")," runs after parameters have been passed to your element for this frame but before the update hooks are invoked "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AfterUpdate")," runs after the update hooks have been invoked but before any children have run "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AfterChildren")," runs after all descendents have been updated ")),(0,r.kt)("p",null,"Input handlers are the same for ",(0,r.kt)("inlineCode",{parentName:"p"},"typography"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"template")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"decorator"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"function")," cannot declare input handlers. "),(0,r.kt)("p",null,"In template code, all input handlers have the same format of ",(0,r.kt)("inlineCode",{parentName:"p"},"event_class:event_name => expression"),". The expression can be\neither a single line statement or a block. Inside of an event handler the ",(0,r.kt)("inlineCode",{parentName:"p"},"$evt")," built in becomes available.\nIts type will depend on the event being fired. "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For mouse events, ",(0,r.kt)("inlineCode",{parentName:"li"},"$evt")," will be a ",(0,r.kt)("a",{parentName:"li",href:"/docs/api_generated/uncategorized_generated/MouseInputEvent"},"MouseInputEvent")),(0,r.kt)("li",{parentName:"ul"},"for key events, ",(0,r.kt)("inlineCode",{parentName:"li"},"$evt")," will be a ",(0,r.kt)("a",{parentName:"li",href:"/docs/api_generated/uncategorized_generated/KeyboardInputEvent"},"KeyboardInputEvent")),(0,r.kt)("li",{parentName:"ul"},"for focus events, ",(0,r.kt)("inlineCode",{parentName:"li"},"$evt")," will be a ",(0,r.kt)("a",{parentName:"li",href:"/docs/api_generated/uncategorized_generated/FocusChangeEvent"},"FocusChangeEvent")),(0,r.kt)("li",{parentName:"ul"},"for text input events, ",(0,r.kt)("inlineCode",{parentName:"li"},"$evt")," will be a ",(0,r.kt)("a",{parentName:"li",href:"/docs/api_generated/uncategorized_generated/TextInputEvent"},"TextInputEvent")),(0,r.kt)("li",{parentName:"ul"},"for drag create, ",(0,r.kt)("inlineCode",{parentName:"li"},"$evt")," is a ",(0,r.kt)("a",{parentName:"li",href:"/docs/api_generated/uncategorized_generated/MouseInputEvent"},"MouseInputEvent")),(0,r.kt)("li",{parentName:"ul"},"for all other drag events, ",(0,r.kt)("inlineCode",{parentName:"li"},"$evt")," will refer to the current drag event whose type is set by the return value of ",(0,r.kt)("inlineCode",{parentName:"li"},"drag:create"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'template InputExample {\n\n    state int clicks;\n    state int focusCount;\n    \n    mouse:down => clicks++;\n    \n    focus:gained => {\n        focusCount++;\n        Debug.Log($"Gained focus {focusCount} times!");\n    }\n}\n')),(0,r.kt)("p",null,"You can modify which phase the event handler fires on with the ",(0,r.kt)("inlineCode",{parentName:"p"},".beforeUpdate"),", ",(0,r.kt)("inlineCode",{parentName:"p"},".afterUpdate")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".afterChildren")," modifiers."),(0,r.kt)("p",null,"By default, events are fired in the ",(0,r.kt)("inlineCode",{parentName:"p"},"afterChildren")," phase. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'decorator SomeDecorator {\n\n    key:down.beforeUpdate => Debug.Log($"{$evt.keyCode} was pressed");\n    key:down.afterUpdate => Debug.Log($"{$evt.keyCode} was pressed");\n    key:down.afterChildren => Debug.Log($"{$evt.keyCode} was pressed");\n    \n')),(0,r.kt)("h3",{id:"propagation"},"Propagation"),(0,r.kt)("p",null,"Events effectively fire for a whole hierarchy unless ",(0,r.kt)("inlineCode",{parentName:"p"},"event.StopPropagation()")," is called. Once called, this event type\nis dead for the duration of the frame and no other element can respond to it. "),(0,r.kt)("p",null,"A common practice in UI frameworks is have the concept of event bubbling and capture. While Evolve doesn't directly\nimplement events in this way, because of the way the event phases are executed we can emulate this fairly well. "),(0,r.kt)("h3",{id:"using-from-with-input-events"},"Using ",(0,r.kt)("inlineCode",{parentName:"h3"},"from")," with input events"),(0,r.kt)("p",null,"When using a ",(0,r.kt)("inlineCode",{parentName:"p"},"from")," mapping, the event signature must match the below 'Mapping Signature' table. In all cases except for\n",(0,r.kt)("inlineCode",{parentName:"p"},"drag:create")," the return type of the linked method is ignored and an be anything. If you use the shorthand for mapping an input handler\nfrom a companion such as ",(0,r.kt)("inlineCode",{parentName:"p"},"mouse:down from $companion")," then the method name must match the name given in the 'Mapping Signature' column.\nIf you supply the method name explicitly such as ",(0,r.kt)("inlineCode",{parentName:"p"},"mouse:down from $companion.SomeMethod")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"mouse:up from someState.SomeMethod")," then only the signatures must match.\nNote that the shorthand that omits the method name is only valid for ",(0,r.kt)("inlineCode",{parentName:"p"},"$companion")),(0,r.kt)("h3",{id:"mouse-event-types"},"Mouse Event Types"),(0,r.kt)(p.ZP,{mdxType:"MouseEventTable"}),(0,r.kt)("h3",{id:"keyboard-event-types"},"Keyboard Event Types"),(0,r.kt)(d.ZP,{mdxType:"KeyEventTable"}),(0,r.kt)("h3",{id:"focus-event-types"},"Focus Event Types"),(0,r.kt)(o.ZP,{mdxType:"FocusEventTable"}),(0,r.kt)("h3",{id:"drag-event-types"},"Drag Event Types"),(0,r.kt)(l.ZP,{mdxType:"DragEventTable"}))}k.isMDXComponent=!0}}]);