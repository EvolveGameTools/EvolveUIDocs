"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[501],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return c}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=p(t),c=a,m=h["".concat(l,".").concat(c)]||h[c]||u[c]||o;return t?r.createElement(m,i(i({ref:n},d),{},{components:t})):r.createElement(m,i({ref:n},d))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},2111:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return l},default:function(){return c},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],s={},l="Style Syntax",p={unversionedId:"templates/style_syntax",id:"templates/style_syntax",title:"Style Syntax",description:"A style is defined in a .style file and contains definitions for how an element",source:"@site/docs/templates/style_syntax.mdx",sourceDirName:"templates",slug:"/templates/style_syntax",permalink:"/EvolveUIDocs/docs/templates/style_syntax",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Style Queries",permalink:"/EvolveUIDocs/docs/templates/style_queries"},next:{title:"Template Syntax",permalink:"/EvolveUIDocs/docs/templates/template_syntax"}},d={},u=[{value:"Basics",id:"basics",level:2},{value:"Constants",id:"constants",level:2},{value:"Queries",id:"queries",level:2},{value:"Mixins",id:"mixins",level:2},{value:"Variables",id:"variables",level:2},{value:"Transitions",id:"transitions",level:2},{value:"Easing Transitions",id:"easing-transitions",level:3},{value:"Bezier Transitions",id:"bezier-transitions",level:3},{value:"Spring Physics Transitions",id:"spring-physics-transitions",level:3}],h={toc:u};function c(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"style-syntax"},"Style Syntax"),(0,o.kt)("p",null,"A style is defined in a ",(0,o.kt)("inlineCode",{parentName:"p"},".style")," file and contains definitions for how an element\nshould look, how it should be sized and positioned, and how it behaves with regards\nto clipping, input, and text handling."),(0,o.kt)("h2",{id:"basics"},"Basics"),(0,o.kt)("p",null,"Every style begins with a ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," keyword and then a unique name.\nThe definition of the style itself come with a set of curly braces. Inside this definition\nare the properties and values that should apply to that element. "),(0,o.kt)("p",null,"Below is a simple style for a 100 by 50 pixel box that colored orange. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"// comments use the double slash syntax\nstyle orange-box {\n    PreferredWidth = 100px;\n    PreferredHeight = 50px;\n    BackgroundColor = orange;\n}\n")),(0,o.kt)("h2",{id:"constants"},"Constants"),(0,o.kt)("p",null,"It can be convenient to declare some values as reusable constants. You can do this with the ",(0,o.kt)("inlineCode",{parentName:"p"},"const")," keyword.\nConstants are defined only at the outer most scope in the file. Lets say that ",(0,o.kt)("inlineCode",{parentName:"p"},"orange-box")," style should instead have\na color value defined from a constant. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"const boxColor = hotpink;\n\nstyle colored-box {\n    PreferredWidth = 100px;\n    PreferredHeight = 50px;\n    BackgroundColor = @boxColor; // constants are referred to with the '@' operator\n}\n")),(0,o.kt)("h2",{id:"queries"},"Queries"),(0,o.kt)("p",null,"Queries are simple ways to style elements based on some application state. To build on our ",(0,o.kt)("inlineCode",{parentName:"p"},"colored-box")," example from\nbefore, let's apply an outline color to the box when it gets hovered by the mouse."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"const boxColor = hotpink;\n\nstyle colored-box {\n    PreferredWidth = 100px;\n    PreferredHeight = 50px;\n    BackgroundColor = @boxColor;\n\n    // apply a 2 pixel wide black outline on hover\n    [hover] {\n        OutlineWidth = 2px;\n        OutlineColor = black;\n    }\n\n}\n")),(0,o.kt)("p",null,"An in depth guide to which queries are available is ",(0,o.kt)("a",{parentName:"p",href:"./style_queries"},"here")),(0,o.kt)("p",null,"Queries can also be nested. We can make our ",(0,o.kt)("inlineCode",{parentName:"p"},"colored-box")," outline appear only when we have an attribute ",(0,o.kt)("inlineCode",{parentName:"p"},"outlined")," and\nour box is currently hovered by nesting two queries. Queries can be nested as deep as you like but you can have\nat most 63 queries on a single style regardless of nesting depth. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"style colored-box {\n    PreferredWidth = 100px;\n    PreferredHeight = 50px;\n    BackgroundColor = @boxColor;\n\n    [attr:outlined] {\n        [hover] {\n            // only apply the outline when we have the 'outlined' attribute and we are hovered\n            OutlineWidth = 2px;\n            OutlineColor = black;\n        }\n    }\n\n}\n")),(0,o.kt)("p",null,"An important concept with styling is the idea of ",(0,o.kt)("inlineCode",{parentName:"p"},"precidence"),". This determines how competing styles figure out who wins. "),(0,o.kt)("p",null,"Let's add another query to highlight this. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"style colored-box {\n    PreferredWidth = 100px;\n    PreferredHeight = 50px;\n    BackgroundColor = @boxColor;\n\n    // apply a 2 pixel wide black outline on hover\n    [hover] {\n        OutlineWidth = 2px;\n        OutlineColor = black;\n    }\n\n    // make the outline color white when we have the 'outlined' attribute applied\n    [attr:outlined] {\n        OutlineColor = white;\n    }\n\n}\n")),(0,o.kt)("p",null,"So now we have a problem. Both the ",(0,o.kt)("inlineCode",{parentName:"p"},"[hover]")," query and the ",(0,o.kt)("inlineCode",{parentName:"p"},"[attr:outlined]")," query define a color. When we hover the element,\nwhich color will it end up being? Each 'block' of styling applied to an element has a precedence score. The more nested a\nblock is, the more precedence it has. The stateful queries ",(0,o.kt)("inlineCode",{parentName:"p"},"[hover]"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"[focus]"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"[active]")," have a higher level importance\neven though they might be defined at the 'depth' as another query. So in the end because of it's elevated importance, the ",(0,o.kt)("inlineCode",{parentName:"p"},"[hover]"),"\nquery wins out over the ",(0,o.kt)("inlineCode",{parentName:"p"},"[attr:outlined]")," and the outline color will be black."),(0,o.kt)("h2",{id:"mixins"},"Mixins"),(0,o.kt)("p",null,"Mixins are reusable styles that can optionally be parameterized. Let's add some behavior to ",(0,o.kt)("inlineCode",{parentName:"p"},"colored-box")," from a mixin. "),(0,o.kt)("p",null,"Let's say we want a reusable style that applies rounding to the corners of an element when it's hovered.\nHere is how we'd do that with a mixin. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"mixin rounded-hover {\n    [hover] {\n        CornerRadius = 50%;\n    }\n}\n\nstyle colored-box {\n    PreferredWidth = 100px;\n    PreferredHeight = 50px;\n    BackgroundColor = @boxColor;\n    mixin(rouned-hover); // this basically copy-pastes the contents of the 'rounded-hover' mixin into this statement. \n                         // any queries or other properties are also copied \n}\n\n")),(0,o.kt)("p",null,"Let's take that example one step further and make it a function that can use a variable for how much rounding we apply. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"// we introduce a parameter called roundness with a default value of 50%;\nmixin rounded-hover-with-parameter(%roundness = 50%) {\n    [hover] {\n        CornerRadius = %{roundness}; // use our parameter instead of applying a hard coded value\n    }\n}\n\nstyle colored-box {\n    PreferredWidth = 100px;\n    PreferredHeight = 50px;\n    BackgroundColor = @boxColor;\n\n    // invoke our mixin but assign roundness to 10px instead of the default 50%\n    mixin(rouned-hover-with-parameter) {\n        roundness = 10px; \n    }\n}\n\n")),(0,o.kt)("p",null,"Styles can also be mixed into other styles and behave just like ",(0,o.kt)("inlineCode",{parentName:"p"},"mixin")," except they cannot provide parameters. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"style mix-me {\n    Margin = 20px;\n    Padding = 20px;\n}\n\nstyle colored-box {\n    PreferredWidth = 100px;\n    PreferredHeight = 50px;\n    BackgroundColor = @boxColor;\n\n    // re-use the 'mix-me' style's properties to apply both margin and padding to this box\n\n    mixin(mix-me);\n\n}\n")),(0,o.kt)("h2",{id:"variables"},"Variables"),(0,o.kt)("p",null,"We talked about constants before which lets us define values one place and reuse them across multiple styles without having\nto go find those values later if we want to change them. This can go one step further with variables. Variables let us define\nvalues dynamically and then makes those values available to all descendant elements too. Here is an example where we want to\nmake a ",(0,o.kt)("inlineCode",{parentName:"p"},"Button")," element that dynamically define the color of it's text based on a variable."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'style <Button> {\n\n    [attr:primary] {\n        set buttonText = red;\n    }\n\n    [attr:secondary] {\n        set buttonText = green;\n    }\n\n}\n\nstyle button-text {\n    // variable syntax is using the `var` function that has the first argument set to the variable we want to read\n    // and the second argument is the value to use if the variable is not defined. \n    TextColor = var(buttonTextColor, white); \n}\n\n// in a .ui file\n\ntemplate Button {\n    Text("Click Me", style = [@button-text]);\n}\n\ntemplate ButtonSample {\n    Button(); // text is white since we have no variable set we use the default\n    Button(attr:primary); // text is red\n    Button(attr:secondary); // text is green \n}\n\n')),(0,o.kt)("h2",{id:"transitions"},"Transitions"),(0,o.kt)("p",null,"Transitions are easy-mode animations. They basically work by observing style properties and when the property value changes,\ninstead of setting the new value immediately, it will smoothly transition from the old value to the new value. "),(0,o.kt)("p",null,"Here is how it works"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"style AnimateColor {\n    // define a transition that uses an easing curve of QuarticEaseIn,\n    // has a duration of 1000ms and applies to the BackgroundColor property\n    transition QuarticEaseIn 1000ms = BackgroundColor;\n\n    BackgroundColor = white;\n    \n    // transition will work from any change source, but hover is an easy one to demonstrate \n    [hover] {\n        BackgroundColor = black;\n    }\n\n}\n")),(0,o.kt)("p",null,"Transitions can be defined in any block scope and apply as long as that scope is active and has the highest precedence."),(0,o.kt)("p",null,"The basic syntax is "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"// basic syntax is the transition keyword, \n// then the interpolator\n// then the duration (if applicable)\n// then the delay (optionally) \n// then = a comma seperated list of properties to apply to \ntransition *easingfn* 1000ms 500ms? = PreferredWidth, BackgroundColor;\n")),(0,o.kt)("p",null,"There are three ",(0,o.kt)("inlineCode",{parentName:"p"},"interopolator")," options for transitions. The most basic is the ",(0,o.kt)("inlineCode",{parentName:"p"},"easing")," mode.\nAll of the easing functions listed ",(0,o.kt)("a",{parentName:"p",href:"https://easings.net/"},"here")," are supported. "),(0,o.kt)("h3",{id:"easing-transitions"},"Easing Transitions"),(0,o.kt)("p",null,"When defining a transition with an ",(0,o.kt)("inlineCode",{parentName:"p"},"ease")," interpolator, a duration is required and a delay is optional."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"style ease-circ {\n    // circular ease in with a 2 second duration and a half second delay\n    transition EaseInCirc 2000ms 500ms = PaddingLeft;\n}\n")),(0,o.kt)("h3",{id:"bezier-transitions"},"Bezier Transitions"),(0,o.kt)("p",null,"You can also provide your own bezier curve definition. You probably want to use a tool like ",(0,o.kt)("a",{parentName:"p",href:"https://cubic-bezier.com/"},"this"),"\nto find the right numbers for the desired curve."),(0,o.kt)("p",null,"Just like easing curves, bezier transitions also require a duration and optionally accept a delay"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"transition bezier(0.17, 0.67, 0.83, 0.67) 500ms = PreferredWidth;\ntransition bezier(0.17, 0.67, 0.83, 0.67) 500ms 200ms = PreferredWidth;\n")),(0,o.kt)("h3",{id:"spring-physics-transitions"},"Spring Physics Transitions"),(0,o.kt)("p",null,"Springs are pretty awesome. Instead of using a curve and fixed duration, they run until they ",(0,o.kt)("inlineCode",{parentName:"p"},"settle"),"\nSettling means that the motion provided by the spring is very close to 0. This provides much more\nnatural feeling animations that are very pleasing to the human eye because they based on nature and not\narbitrary timing values. ",(0,o.kt)("a",{parentName:"p",href:"https://www.joshwcomeau.com/animation/a-friendly-introduction-to-spring-physics/"},"Here is a great resource on how they can be use for animation")),(0,o.kt)("p",null,"Here are some other ways to define spring transitions. There are a few default spring configurations that\nexist as keywords "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"default"),(0,o.kt)("li",{parentName:"ul"},"gentle"),(0,o.kt)("li",{parentName:"ul"},"stiff"),(0,o.kt)("li",{parentName:"ul"},"wobbly"),(0,o.kt)("li",{parentName:"ul"},"slow"),(0,o.kt)("li",{parentName:"ul"},"superslow")),(0,o.kt)("p",null,"You can define a spring using one of those keywords, a constant, or by providing the values directly. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"const mySpring = wobbly;\ntransition spring(@mySpring) = PreferredWidth;\ntransition spring(gentle) = PreferredWidth;\ntransition spring(default) = PreferredWidth;\ntransition spring(120, 10) = PreferredWidth; // stiffness, damping\ntransition spring(120, 10, 1) = PreferredWidth; // stiffness, damping, mass\n\n// stiffness, damping, mass, precision (how close to 0 we need to be in order to be considered 'settled'\ntransition spring(120, 10, 2, 0.1) = PreferredWidth;\n\n")))}c.isMDXComponent=!0}}]);