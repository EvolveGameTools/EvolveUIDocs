"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[70854],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),f=a,d=m["".concat(s,".").concat(f)]||m[f]||u[f]||o;return n?r.createElement(d,i(i({ref:t},c),{},{components:n})):r.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},43566:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={},i="Element References",l={unversionedId:"templates/element_reference",id:"templates/element_reference",title:"Element References",description:"Evolve is a high performance UI library and as such makes certain decisions around what the concept of a UI element really is. Unlike",source:"@site/docs/templates/element_reference.md",sourceDirName:"templates",slug:"/templates/element_reference",permalink:"/EvolveUIDocs/docs/templates/element_reference",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"conceptual",previous:{title:"Destructive Scopes",permalink:"/EvolveUIDocs/docs/templates/destructive"},next:{title:"Expression Syntax",permalink:"/EvolveUIDocs/docs/templates/expression_syntax"}},s={},p=[{value:"Element references with companion types",id:"element-references-with-companion-types",level:2}],c={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"element-references"},"Element References"),(0,a.kt)("p",null,"Evolve is a high performance UI library and as such makes certain decisions around what the concept of a UI element really is. Unlike\nmost other UI systems, the core unit of Evolve is not a tree node that is subclassed from some type, but a simple 4 byte type called ",(0,a.kt)("inlineCode",{parentName:"p"},"ElementId"),"."),(0,a.kt)("p",null,"Because we don't use real objects to represent our UI elements, we need a way work with ",(0,a.kt)("inlineCode",{parentName:"p"},"ElementId"),"s in the context of our game in order to\nset styles, attributes, perform layout and do all of the typical UI things. The solution to this in Evolve is a type called ",(0,a.kt)("inlineCode",{parentName:"p"},"ElementReference"),"."),(0,a.kt)("p",null,"The purpose of an ",(0,a.kt)("inlineCode",{parentName:"p"},"ElementReference")," is to be the one stop shop for interfacing with the system data for a single element. An ",(0,a.kt)("inlineCode",{parentName:"p"},"ElementReference")," can be\nused to query layout results, set style properties, manipulate a list of applied styles, check the 'live-ness' of an element, and is often passed around\nin templates as arguments to things that need to position themselves relatively or query an element for certain properties."),(0,a.kt)("p",null,"There are a few ways to get an ",(0,a.kt)("inlineCode",{parentName:"p"},"ElementReference")," depending on the context you are working in. "),(0,a.kt)("p",null,"Have a look at the built in variables: ",(0,a.kt)("inlineCode",{parentName:"p"},"$root"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"$element"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"$parent"),"."),(0,a.kt)("p",null,"The next easiest way to get an ",(0,a.kt)("inlineCode",{parentName:"p"},"ElementReference")," is by extruding one. There is a speical extrusion operator ",(0,a.kt)("inlineCode",{parentName:"p"},"&")," which will resolve to an ",(0,a.kt)("inlineCode",{parentName:"p"},"ElementReference"),". "),(0,a.kt)("p",null,"You can use this operator with any identifier you want to extrude an ",(0,a.kt)("inlineCode",{parentName:"p"},"ElementReference"),". When using ",(0,a.kt)("inlineCode",{parentName:"p"},"&"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"as")," aliases are invalid. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'\ntemplate Example render {\n\n    Thing() [&myElement];\n    run myElement.SetAttribute("cool", "definitely");\n    \n}\n\n')),(0,a.kt)("h2",{id:"element-references-with-companion-types"},"Element references with companion types"),(0,a.kt)("p",null,"When defining a companion type in C#, you can define a public, non readonly field of type ",(0,a.kt)("inlineCode",{parentName:"p"},"ElementReference")," and mark it with the attribute ",(0,a.kt)("inlineCode",{parentName:"p"},"[InjectElementReference]"),"\nand the system will set the value of this field to the paired ElementReference."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"// when used as a companion, the myElementReference will be set by the system. This still works even if this companion type\n// is used as a companion for a decorator. Note that it will NOT be set when used as the companion of a `function`, because functions\n// are not mapped 1-1 with elements. No error will be thrown in this case, the field will simply not be initialized. \npublic class SomeCompanion {\n\n    [InjectElementReference]\n    public ElementReference myElementReference;\n\n}\n\n")))}m.isMDXComponent=!0}}]);