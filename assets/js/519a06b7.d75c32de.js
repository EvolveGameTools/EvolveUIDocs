"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2376],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),s=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=s(r),d=n,f=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return r?a.createElement(f,l(l({ref:t},c),{},{components:r})):a.createElement(f,l({ref:t},c))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,l=new Array(o);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[m]="string"==typeof e?e:n,l[1]=i;for(var s=2;s<o;s++)l[s]=r[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},47694:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=r(87462),n=(r(67294),r(3905));const o={},l="Parameters",i={unversionedId:"templates/top_level_declarations/members/parameters",id:"templates/top_level_declarations/members/parameters",title:"Parameters",description:"Templates can accept parameters which is the preferred way to get data into them. Parameters can be either declared",source:"@site/docs/templates/top_level_declarations/members/parameters.md",sourceDirName:"templates/top_level_declarations/members",slug:"/templates/top_level_declarations/members/parameters",permalink:"/EvolveUIDocs/docs/templates/top_level_declarations/members/parameters",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"conceptual",previous:{title:"on_change",permalink:"/EvolveUIDocs/docs/templates/top_level_declarations/members/on_change"},next:{title:"Slots",permalink:"/EvolveUIDocs/docs/templates/top_level_declarations/members/slots"}},p={},s=[],c={toc:s};function m(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"parameters"},"Parameters"),(0,n.kt)("p",null,"Templates can accept parameters which is the preferred way to get data into them. Parameters can be either declared\ndirectly in a template or using a ",(0,n.kt)("inlineCode",{parentName:"p"},"from")," declaration. "),(0,n.kt)("p",null,"There are two types of parameter declarations: ",(0,n.kt)("inlineCode",{parentName:"p"},"required")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"optional"),". Required parameters cannot define a\ndefault value, but optional parameters can. If a required parameter is not provided when a template is used the\ncompiler will show an error. "),(0,n.kt)("p",null,"Parameters can either define a new field on a template or use a feature called ",(0,n.kt)("inlineCode",{parentName:"p"},"from")," to alias another expression."),(0,n.kt)("p",null,"Required parameters must be defined before optional ones. The order in which you define your parameters is also\nthe order in which a caller must provide them if not explicitly referring to them by name. When using implicit\nparameter passing, the rules follow those of C# ",(0,n.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments"},"Named Arguments"),"\nexcept that we use an ",(0,n.kt)("inlineCode",{parentName:"p"},"=")," instead of ",(0,n.kt)("inlineCode",{parentName:"p"},":")," like C# does. "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"template ParameterExample {\n\n    required Vector3 vec; // define a required parameter \n    optional float value; // define an optional parameter\n    optional string name = \"EvolveUI\"; // define an optional parameter with a default value\n    \n    optional float valueX from stateVector.x; // map this parameter to stateVector's x field \n    optional float valueY from stateVector.y = 3.14159f; // map this parameter to stateVector's y field, with a default value\n    state Vector3 stateVector;\n    \n    // private parameters are not visible outside of the template definition. A caller can still pass them \n    // into the template but they cannot be used with the `sync` or `onChange` declarations and cannot be extruded\n    optional:private string secret;\n    \n}\n\ntemplate ParameterUsage {\n\n    render {\n        // with explicit parameter passing\n        ParameterExample(vec = new Vector3(), valueX = 10, valueY = 11);\n        // with immplicit parameter passing (vec3, value, then explicitly valueY because it skips over other optional parameters)\n        ParameterExample(new Vector3(), 10f, valueY = 11);\n    }\n    \n}\n\n")))}m.isMDXComponent=!0}}]);