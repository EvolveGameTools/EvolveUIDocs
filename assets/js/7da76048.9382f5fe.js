"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[91473],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),f=o,d=m["".concat(s,".").concat(f)]||m[f]||u[f]||a;return t?r.createElement(d,i(i({ref:n},c),{},{components:t})):r.createElement(d,i({ref:n},c))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[m]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},43567:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=t(87462),o=(t(67294),t(3905));const a={},i=void 0,l={unversionedId:"Topics/element_reference",id:"Topics/element_reference",title:"element_reference",description:"Element References",source:"@site/docs/Topics/element_reference.md",sourceDirName:"Topics",slug:"/Topics/element_reference",permalink:"/EvolveUIDocs/docs/Topics/element_reference",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"conceptual",previous:{title:"Built In Variables",permalink:"/EvolveUIDocs/docs/Topics/builtins"},next:{title:"Generics",permalink:"/EvolveUIDocs/docs/Topics/generics"}},s={},p=[{value:"Element References",id:"element-references",level:3},{value:"Element references with companion types",id:"element-references-with-companion-types",level:4}],c={toc:p};function m(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"element-references"},"Element References"),(0,o.kt)("p",null,"Evolve is a high performance UI library and as such makes certain decisions around what the concept of a UI element really is. Unlike\nmost other UI systems, the core unit of Evolve is not a tree node that is subclassed from some type, but a simple 4 byte type called ",(0,o.kt)("inlineCode",{parentName:"p"},"ElementId"),"."),(0,o.kt)("p",null,"Because we don't use real objects to represent our UI elements, we need a way work with ",(0,o.kt)("inlineCode",{parentName:"p"},"ElementId"),"s in the context of our game in order to\nset styles, attributes, perform layout and do all of the typical UI things. The solution to this in Evolve is a type called ",(0,o.kt)("inlineCode",{parentName:"p"},"ElementReference"),"."),(0,o.kt)("p",null,"The purpose of an ",(0,o.kt)("inlineCode",{parentName:"p"},"ElementReference")," is to be the one stop shop for interfacing with the system data for a single element. An ",(0,o.kt)("inlineCode",{parentName:"p"},"ElementReference")," can be\nused to query layout results, set style properties, manipulate a list of applied styles, check the 'live-ness' of an element, and is often passed around\nin templates as arguments to things that need to position themselves relatively or query an element for certain properties."),(0,o.kt)("p",null,"There are a few ways to get an ",(0,o.kt)("inlineCode",{parentName:"p"},"ElementReference")," depending on the context you are working in. "),(0,o.kt)("p",null,"Have a look at the built in variables: ",(0,o.kt)("inlineCode",{parentName:"p"},"$root"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"$element"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"$parent"),"."),(0,o.kt)("p",null,"The next easiest way to get an ",(0,o.kt)("inlineCode",{parentName:"p"},"ElementReference")," is by extruding one. There is a speical extrusion operator ",(0,o.kt)("inlineCode",{parentName:"p"},"&")," which will resolve to an ",(0,o.kt)("inlineCode",{parentName:"p"},"ElementReference"),". "),(0,o.kt)("p",null,"You can use this operator with any identifier you want to extrude an ",(0,o.kt)("inlineCode",{parentName:"p"},"ElementReference"),". When using ",(0,o.kt)("inlineCode",{parentName:"p"},"&"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"as")," aliases are invalid. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'\ntemplate Example render {\n\n    Thing() [&myElement];\n    run myElement.SetAttribute("cool", "definitely");\n    \n}\n\n')),(0,o.kt)("h4",{id:"element-references-with-companion-types"},"Element references with companion types"),(0,o.kt)("p",null,"When defining a companion type in C#, you can define a public, non readonly field of type ",(0,o.kt)("inlineCode",{parentName:"p"},"ElementReference")," and mark it with the attribute ",(0,o.kt)("inlineCode",{parentName:"p"},"[InjectElementReference]"),"\nand the system will set the value of this field to the paired ElementReference."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"// when used as a companion, the myElementReference will be set by the system. This still works even if this companion type\n// is used as a companion for a decorator. Note that it will NOT be set when used as the companion of a `function`, because functions\n// are not mapped 1-1 with elements. No error will be thrown in this case, the field will simply not be initialized. \npublic class SomeCompanion {\n\n    [InjectElementReference]\n    public ElementReference myElementReference;\n\n}\n\n")))}m.isMDXComponent=!0}}]);