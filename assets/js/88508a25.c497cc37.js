"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[92294],{3905:function(e,t,n){n.d(t,{Zo:function(){return h},kt:function(){return c}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},h=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),d=p(n),c=i,m=d["".concat(s,".").concat(c)]||d[c]||u[c]||r;return n?a.createElement(m,o(o({ref:t},h),{},{components:n})):a.createElement(m,o({ref:t},h))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},10688:function(e,t,n){n.r(t),n.d(t,{assets:function(){return h},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var a=n(87462),i=n(63366),r=(n(67294),n(3905)),o=["components"],l={},s="Create and Animate the Quest Filter",p={unversionedId:"Tutorials/QuestLog/createNavigation",id:"Tutorials/QuestLog/createNavigation",title:"Create and Animate the Quest Filter",description:"The player will be able to filter the quests based on those that are active or completed. The filter will be triggered by a click event that is hooked up to two text elements. There will be a simple bar that animates as it transitions from one element to the other. Here's what it'll look like when you are done:",source:"@site/docs/Tutorials/QuestLog/createNavigation.mdx",sourceDirName:"Tutorials/QuestLog",slug:"/Tutorials/QuestLog/createNavigation",permalink:"/EvolveUIDocs/docs/Tutorials/QuestLog/createNavigation",tags:[],version:"current",frontMatter:{},sidebar:"tutorials",previous:{title:"Create the Main Screen",permalink:"/EvolveUIDocs/docs/Tutorials/QuestLog/defineRootTemplate"},next:{title:"Populate the Quest List",permalink:"/EvolveUIDocs/docs/Tutorials/QuestLog/populateQuestList"}},h={},u=[{value:"Update AppRoot",id:"update-approot",level:2},{value:"Add the Elements",id:"add-the-elements",level:2},{value:"Register Player Interactions",id:"register-player-interactions",level:2}],d={toc:u};function c(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"create-and-animate-the-quest-filter"},"Create and Animate the Quest Filter"),(0,r.kt)("p",null,"The player will be able to filter the quests based on those that are active or completed. The filter will be triggered by a click event that is hooked up to two text elements. There will be a simple bar that animates as it transitions from one element to the other. Here's what it'll look like when you are done:"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://picsum.photos/id/1025/400",alt:"Example banner"})),(0,r.kt)("p",null,"Before jumping in you will need new ",(0,r.kt)("strong",{parentName:"p"},"UI")," and ",(0,r.kt)("strong",{parentName:"p"},"Style")," assets to work out of. Create them via a subdirectory under ",(0,r.kt)("strong",{parentName:"p"},"UserInterface")," and name them both ",(0,r.kt)("strong",{parentName:"p"},"QuestList"),"."),(0,r.kt)("h2",{id:"update-approot"},"Update AppRoot"),(0,r.kt)("p",null,"It is, of course, possible to have templates call other templates. This is very helpful for creating modular code that is easier to maintain. Lets have you take care of that part of the setup before jumping into building out QuestList - that way you can see your progress in real time."),(0,r.kt)("p",null,"Open ",(0,r.kt)("inlineCode",{parentName:"p"},"AppRoot.ui")," and add the following code to the end of the Template:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'template AppRoot : AppRoot() {\n\n   Div(style = [@header-row]) {\n       Div(style = [@gradient-line]);\n       Title("Quests"); \n       Div(style = [@gradient-line]);\n   }\n\n   //highlight-start\n   Div(style = [@master-detail-container]) {\n        QuestList();\n   }\n    //highlight-end\n}\n')),(0,r.kt)("p",null,"Add the following style to ",(0,r.kt)("inlineCode",{parentName:"p"},"AppRoot.style"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"style master-detail-container {\n    LayoutType = Horizontal;\n    SpaceBetweenHorizontal = 50px;\n    PreferredSize = 1s;\n}\n")),(0,r.kt)("p",null,"Everything here is pretty straight forward. As you can see, the only new concept is that you supply the name of the template to reference it. If we had parameters, then they would be passed in as well."),(0,r.kt)("h2",{id:"add-the-elements"},"Add the Elements"),(0,r.kt)("p",null,"The first thing you'll do is setup the base elements that the player will interact with. Open QuestList.UI and add the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using QuestLog;\nusing System;\nusing System.Collections.Generic;\n\nelement QuestList { }\n\ntemplate QuestList : element QuestList {\n    \n    Group(style = [@quest-list-header]) {\n       TitleMedium("Active", attr:uppercase);\n       TitleMedium("Completed", attr:uppercase);\n    }\n    \n    Div(style = [@accent]);    \n}\n')),(0,r.kt)("p",null,"Next, add the following styles to QuestList.style:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"const color_LightWhite = #6D6C72;\n\nstyle quest-list-header {\n    LayoutType = Horizontal;\n    SpaceBetweenHorizontal = 32px;\n    PreferredWidth = 496px;\n    PaddingLeft = 32px;\n    BorderBottom = 1px;\n    BorderColor = @color_LightWhite;\n    PaddingBottom = 8px;\n    MarginBottom = 12px;\n}\n\nstyle accent {\n\n    LayoutBehavior = Ignored;\n    PreferredSize = 90px 4px;\n    BackgroundColor = white;\n    AlignmentOriginX = -0.5w;\n    AlignmentOffsetX = 70px;\n    AlignmentOffsetY = 35px;\n    AlignmentTarget = Parent;\n    CornerRadius = 50%;\n    ShadowColor = white;\n    ShadowBlur = 15;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"accent")," is introducing a few new style properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"LayoutBehavior")," specifies whether the element should participate in the parent's layout phase. In this case, accent is set to ",(0,r.kt)("inlineCode",{parentName:"li"},"Ignored"),", which means that it will not contribute to the parent size. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AlignmentOrigin"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"AlignmentOffset")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"AlignmentTarget")," are properties that adjust how the element aligns in relation to it's parent. For example, because ",(0,r.kt)("inlineCode",{parentName:"li"},"AlignmentOriginX")," is set to ",(0,r.kt)("inlineCode",{parentName:"li"},"-0.5w"),", the element will adjust the X starting position to be negative half the width of the parent. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CornerRadius")," changes the element to have rounded corners by the specified amount."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ShadowColor")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"ShadowBlur")," can be used to add a shadow effect and are responsible for the nice glow that the bar has.")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Try changing the values of the elements above to see how they impact the visual look."))),(0,r.kt)("p",null,"Push play to see how your new elements are drawn onto the UI. There's no interactivity yet though! You'll do that next."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://picsum.photos/id/1025/400",alt:"Example banner"})),(0,r.kt)("h2",{id:"register-player-interactions"},"Register Player Interactions"),(0,r.kt)("p",null,"Two things need to happen when the player clicks on of the filters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The bottom highlight needs to move to the new active state"),(0,r.kt)("li",{parentName:"ul"},"The list of quests needs to filter to the right set")),(0,r.kt)("p",null,"There also needs to be a check to make sure that nothing happens when the player clicks on the filter that is already enabled. "),(0,r.kt)("p",null,"In this section you will focus just on animating the bottom highlight. Add the following code to the top of QuestList.UI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"template QuestList : element QuestList {\n\n    state QuestStatus status = QuestStatus.Active;\n    \n    state float animTargetX = 0;\n    state float animTargetWidth = 0;\n    \n    var bool shouldStartAnimation = false;       \n    \n    state Action<UIElement, QuestStatus> QuestFilter_OnClick = (el, newStatus) => {\n       if(status == newStatus) {\n           return;\n       }\n       \n       status = newStatus;\n       \n       animTargetWidth = el.GetLayoutSize().width;\n       animTargetX = el.GetLayoutLocalPosition().x + animTargetWidth * 0.5f;\n\n       shouldStartAnimation = true;\n       \n    };\n    \n    //original code after this point\n}\n\n")),(0,r.kt)("p",null,"The code above is defining and setting four ",(0,r.kt)("inlineCode",{parentName:"p"},"state")," variables. State variables are a special kind of variable that persist across frames like regular C# variables. However, unlike regular variables, the value assignment runs just once when the template is first instantiated. Here is a deeper look at each variable:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"status")," tracks whichever filter is currently active which is set to Active by default."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"animTargetX")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"animTargetWidth")," set the target x position and width of the Div/Accent element that you created earlier. These values will be set again and used with the animation runs."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"shouldStartAnimation")," represents whether code should run to move the Div/Accent element to a new filter. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"QuestFilter_OnClick")," is an ",(0,r.kt)("inlineCode",{parentName:"li"},"Action")," that will run each time the player clicks on a filter. The first thing it'll do is confirm that the player clicked on a new filter and will abort if they did not. When the check passes, it'll update the status and set the proper values for the animation variables.")),(0,r.kt)("p",null,"Now it's time to hook up the click event, update the two Text_H2 elements so that they include a mouse:click event: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'Group(style = [@quest-list-header]) {\n   Text_H2("Active", attr:uppercase,\n    //highlight-start\n        mouse:click = QuestFilter_OnClick($this, QuestStatus.Active));\n    //highlight-end\n\n   Text_H2("Completed", attr:uppercase,\n    //highlight-start\n      mouse:click = QuestFilter_OnClick($this, QuestStatus.Completed));\n  //highlight-end\n  });\n')),(0,r.kt)("p",null,"Any element can register a callback. You just need to provide a prefix (i.e ",(0,r.kt)("inlineCode",{parentName:"p"},"mouse"),"), the event type (i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},"click"),"), and assign it code to run. The Active and Completed filters are both registered to handle ",(0,r.kt)("inlineCode",{parentName:"p"},"mouse:click")," events and pointed towards ",(0,r.kt)("inlineCode",{parentName:"p"},"QuestFilter_OnClick"),". "),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"There are many different types of events that you can hook into that cover mouse, keyboard, drag & drop, and touch events. You can read more here."))),(0,r.kt)("p",null,"If you were to click on one of the buttons nothing would happen. That's because the actual animation logic is missing. Update the Div/Accent element to have the following code: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"Div(style = [@accent], on:update = () {\n    if(shouldStartAnimation) {\n        $this.style.SetAlignmentOffsetX(animTargetX);\n        $this.style.SetPreferredWidth(animTargetWidth);\n    }\n});\n")),(0,r.kt)("p",null,"Elements also have several lifecycle hooks that you can use. In this case, the ",(0,r.kt)("inlineCode",{parentName:"p"},"on:update")," hook is used to check whether the element needs to be animated, and if so, sets a new ",(0,r.kt)("inlineCode",{parentName:"p"},"AlignmentOffsetX")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"PreferredWidth")," values based on the animation state variables defined and set earlier. "),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"There are many different types of lifecycle events that you can hook into, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"on:enable"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"on:create")," and more. You can read more here."))),(0,r.kt)("p",null,"Run or reload the project in Unity and try clicking on one of the filters. Unfortinately, it's not smoothly animating just yet. "),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://picsum.photos/id/1025/400",alt:"Example banner"})),(0,r.kt)("p",null,"This is because there's one style property that is missing from ",(0,r.kt)("inlineCode",{parentName:"p"},"Accent"),". Open QuestList.style and update the accent style to include the following property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"style accent {\n    /* Other styles above */\n    transition CubicEaseIn 200ms = AlignmentOffsetX, PreferredWidth;\n}\n")),(0,r.kt)("p",null,"Transitions are easy to implement animations that observe style properties. When a property value is changed, the system will smoothly transition from the old value to the new one. Transitions are built on top of the animation system, which uses a generic interpolator that you can extend. In the property above, the standard ",(0,r.kt)("inlineCode",{parentName:"p"},"CubicEaseIn")," interpolator is used. The duration is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"200ms")," and the properties that the transition will monitor for are ",(0,r.kt)("inlineCode",{parentName:"p"},"AlignmentOffsetX")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"PreferredWidth"),"."),(0,r.kt)("p",null,"Run or reload the project again and you should now see it smoothly animating."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://picsum.photos/id/1025/400",alt:"Example banner"})))}c.isMDXComponent=!0}}]);