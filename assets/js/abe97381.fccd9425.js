"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[60269],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),c=a,h=u["".concat(l,".").concat(c)]||u[c]||m[c]||i;return n?r.createElement(h,o(o({ref:t},d),{},{components:n})):r.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},34057:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={sidebar_position:1,sidebar_label:"Getting Started"},o="WTF is this EvolveUI thing?",s={unversionedId:"getting_started/index",id:"getting_started/index",title:"WTF is this EvolveUI thing?",description:"EvolveUI is a UI system for Unity3D. It draws pretty boxes, fast.",source:"@site/docs/getting_started/index.mdx",sourceDirName:"getting_started",slug:"/getting_started/",permalink:"/EvolveUIDocs/docs/getting_started/",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Getting Started"},sidebar:"conceptual",next:{title:"SRP Setup",permalink:"/EvolveUIDocs/docs/getting_started/srp_setup"}},l={},p=[],d={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"wtf-is-this-evolveui-thing"},"WTF is this EvolveUI thing?"),(0,a.kt)("p",null,"EvolveUI is a UI system for Unity3D. It draws pretty boxes, fast. "),(0,a.kt)("p",null,"It is part UI DSL, part compiler, part runtime. "),(0,a.kt)("p",null,"It's basically a programming language that is custom-built for a single purpose: make some dope UI for\ngames and simulations with as little effort as possible on your end. "),(0,a.kt)("h1",{id:"buckle-up-buttercup"},"Buckle Up Buttercup"),(0,a.kt)("p",null,"This is going to be quite a bit different from any other UI system you've probably used before. You might have heard the\nterms ",(0,a.kt)("inlineCode",{parentName:"p"},"RetainedMode")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ImmediateMode")," UI. Retained Mode is typically something html/css where you make 'nodes'\nthat live in a tree, and they are alive for as long as they are still part of the UI tree. All the state changes\nare kept until you change them, for example in HTML you might add a class or an attribute once, and it will stay there\nuntil you remove it or our sun runs out of hydrogen. "),(0,a.kt)("p",null,"Immediate mode is something like ",(0,a.kt)("inlineCode",{parentName:"p"},"DearImgui")," which is the complete opposite: nothing is saved. You basically get\na blank canvas every frame that you need to rebuild. This is pretty neat because the programming model is so damn simple.\nIt's easy to make things quickly, and it's pretty fast despite rebuilding all the things all the time. It basically boils\ndown just function calls you make, and you don't need other tooling/languages like html/css to build it, just use whatever\nyour weapon-of-choice programming language is, and you're good to go. "),(0,a.kt)("p",null,"EvolveUI is a bit of a special snowflake where it draws from both of these ideas. In an Evolve app, we keep state around\nbetween frames but the code looks and feels like an immediate mode gui. This will make more sense later, let's build something. "),(0,a.kt)("h1",{id:"drawing-all-the-things"},"Drawing all the things."),(0,a.kt)("p",null,"Ok enough words, we want pretty boxes. Let's do that."),(0,a.kt)("p",null,"Open the tutorial project"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c#"},'template AppRoot {\n    render {\n        Text("Hello, Creature!"); \n    }\n}\n')),(0,a.kt)("p",null,"I might have lied a little bit, this just text, this is not a pretty box. Anyway, this is what an EvolveUI template looks like. "),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"template")," is kind of like a component in React, a Widget in Flutter, etc. It's a thing that is reusable that defines how to make some UI. "),(0,a.kt)("p",null,"Let's make more of them. It's almost my birthday, I need to invite people so let's do that. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c#"},'\ntemplate BirthdayInvite {\n    \n    required string name; // who are we inviting? \n    \n    render {\n        Text($"{name} is invited to my birthday");\n    }\n    \n}\n\ntemplate AppRoot {\n    render {\n        Text("People to invite");\n        BirthdayInvite("Ella");\n        BirthdayInvite("Lea");\n        BirthdayInvite("Christian");\n    }\n}\n\n')),(0,a.kt)("p",null,"I have more than 3 friends though, and I want my friends to invite the friends. Lets make this better. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c#"},'\ntemplate BirthdayInvite {\n    \n    required string name; // who are we inviting? \n    \n    render {\n        Text($"{name} is invited to my birthday");\n    }\n    \n}\n\ntemplate AppRoot {\n    render {\n        Text("People to invite");\n        BirthdayInvite("Ella");\n        BirthdayInvite("Lea");\n        BirthdayInvite("Christian");\n    }\n}\n\n')))}u.isMDXComponent=!0}}]);